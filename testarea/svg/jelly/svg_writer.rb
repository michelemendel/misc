#!ruby

#--
# This file was generated automatically, and may get overwritten.
#++
#
# == Svg_writer
#
# A Ruby lib generated by 
# http://www.pinkjuice.com/ruby/jelly/ 0.0.3
# from xsd/20020108_svg.xsd
#
#
# === Usage:
#
# SVG example:
#  doc = Svg_doc.new 
#  r = Rect.new
#  r.width = r.height = 42
#  r.height = 12.43
#  # puts r.width.class
#    # => Fixnum
#  # puts r.height.class
#    # => Float
#  a = Animate.new
#  a.attributeName = 'x'
#  r.add_element a
#  doc.root.add_element r
#  print doc
#
# === More methods (XPath etc.)
#
# REXML::Document and REXML::Element methods are available:
#
# http://www.germane-software.com/~ser/software/rexml/api/rexml/index.html
#
# Jelly is Alpha:
# The APIs of the generated libs may change with future versions.
# I can't offer any support for the specific generated APIs.
# Change requests must make sense for all possible generated libs.
# Copyright tobiasreif@pinkjuice.com 2002,
# GPL, all disclaimers.

class String # :nodoc:

  def to_number
    Integer(self) rescue Float(self) rescue self
  end
  
end

class Hash # :nodoc:

  def values_to_s
    self.each_pair{|k,v|self[k]=v.to_s}
  end
  
  def values_to_numbers
    self.each_pair{|k,v|self[k]=v.to_number}
  end
end

$:.unshift 'rexml/1.2.5/'
require 'rexml/document'
include REXML
  
class Attributes # :nodoc:

  def [](name)
    if super == nil
      nil
    else
      super.value.to_number
    end
  end
      
end

  
class Element # :nodoc:
  
  def add_element element=nil, attrs=nil
    el = @elements.add element
    attrs.each_pair do |key, value|
    el.attributes[key]=value
    end if attrs.kind_of? Hash
    element
  end
  
end


module Utils

  def add_attributes h
    super h.values_to_s
    h.values_to_numbers
  end
      
end

#--
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
#++

module StdAttrs

  #foo

  #foo

  def svg_id= value
    value = value.to_s
    @attributes['id'] = value
    value.to_number
  end

  def svg_id
    @attributes['id'].to_s.to_number
  end
#foofoo
  def xml_base= value
    value = value.to_s
    @attributes['xml:base'] = value
    value.to_number
  end

  def xml_base
    @attributes['base'].to_s.to_number
  end
end

module LangSpaceAttrs
#foofoo
  def xml_lang= value
    value = value.to_s
    @attributes['xml:lang'] = value
    value.to_number
  end

  def xml_lang
    @attributes['lang'].to_s.to_number
  end
#foofoo
  def xml_space= value
    value = value.to_s
    @attributes['xml:space'] = value
    value.to_number
  end

  def xml_space
    @attributes['space'].to_s.to_number
  end
end

module TestAttrs

  #foo

  #foo

  def requiredFeatures= value
    value = value.to_s
    @attributes['requiredFeatures'] = value
    value.to_number
  end

  def requiredFeatures
    @attributes['requiredFeatures'].to_s.to_number
  end

  #foo

  #foo

  def requiredExtensions= value
    value = value.to_s
    @attributes['requiredExtensions'] = value
    value.to_number
  end

  def requiredExtensions
    @attributes['requiredExtensions'].to_s.to_number
  end

  #foo

  #foo

  def systemLanguage= value
    value = value.to_s
    @attributes['systemLanguage'] = value
    value.to_number
  end

  def systemLanguage
    @attributes['systemLanguage'].to_s.to_number
  end
end

module XlinkRefAttrs
#foofoo
  def xlink_type= value
    value = value.to_s
    @attributes['xlink:type'] = value
    value.to_number
  end

  def xlink_type
    @attributes['type'].to_s.to_number
  end
#foofoo
  def xlink_role= value
    value = value.to_s
    @attributes['xlink:role'] = value
    value.to_number
  end

  def xlink_role
    @attributes['role'].to_s.to_number
  end
#foofoo
  def xlink_arcrole= value
    value = value.to_s
    @attributes['xlink:arcrole'] = value
    value.to_number
  end

  def xlink_arcrole
    @attributes['arcrole'].to_s.to_number
  end
#foofoo
  def xlink_title= value
    value = value.to_s
    @attributes['xlink:title'] = value
    value.to_number
  end

  def xlink_title
    @attributes['title'].to_s.to_number
  end
#foofoo
  def xlink_show= value
    value = value.to_s
    @attributes['xlink:show'] = value
    value.to_number
  end

  def xlink_show
    @attributes['show'].to_s.to_number
  end
#foofoo
  def xlink_actuate= value
    value = value.to_s
    @attributes['xlink:actuate'] = value
    value.to_number
  end

  def xlink_actuate
    @attributes['actuate'].to_s.to_number
  end
end

module XlinkRefAttrsEmbed
#foofoo
  def xlink_type= value
    value = value.to_s
    @attributes['xlink:type'] = value
    value.to_number
  end

  def xlink_type
    @attributes['type'].to_s.to_number
  end
#foofoo
  def xlink_role= value
    value = value.to_s
    @attributes['xlink:role'] = value
    value.to_number
  end

  def xlink_role
    @attributes['role'].to_s.to_number
  end
#foofoo
  def xlink_arcrole= value
    value = value.to_s
    @attributes['xlink:arcrole'] = value
    value.to_number
  end

  def xlink_arcrole
    @attributes['arcrole'].to_s.to_number
  end
#foofoo
  def xlink_title= value
    value = value.to_s
    @attributes['xlink:title'] = value
    value.to_number
  end

  def xlink_title
    @attributes['title'].to_s.to_number
  end
#foofoo
  def xlink_show= value
    value = value.to_s
    @attributes['xlink:show'] = value
    value.to_number
  end

  def xlink_show
    @attributes['show'].to_s.to_number
  end
#foofoo
  def xlink_actuate= value
    value = value.to_s
    @attributes['xlink:actuate'] = value
    value.to_number
  end

  def xlink_actuate
    @attributes['actuate'].to_s.to_number
  end
end

module GraphicsElementEvents

  #foo

  #foo

  def onfocusin= value
    value = value.to_s
    @attributes['onfocusin'] = value
    value.to_number
  end

  def onfocusin
    @attributes['onfocusin'].to_s.to_number
  end

  #foo

  #foo

  def onfocusout= value
    value = value.to_s
    @attributes['onfocusout'] = value
    value.to_number
  end

  def onfocusout
    @attributes['onfocusout'].to_s.to_number
  end

  #foo

  #foo

  def onactivate= value
    value = value.to_s
    @attributes['onactivate'] = value
    value.to_number
  end

  def onactivate
    @attributes['onactivate'].to_s.to_number
  end

  #foo

  #foo

  def onclick= value
    value = value.to_s
    @attributes['onclick'] = value
    value.to_number
  end

  def onclick
    @attributes['onclick'].to_s.to_number
  end

  #foo

  #foo

  def onmousedown= value
    value = value.to_s
    @attributes['onmousedown'] = value
    value.to_number
  end

  def onmousedown
    @attributes['onmousedown'].to_s.to_number
  end

  #foo

  #foo

  def onmouseup= value
    value = value.to_s
    @attributes['onmouseup'] = value
    value.to_number
  end

  def onmouseup
    @attributes['onmouseup'].to_s.to_number
  end

  #foo

  #foo

  def onmouseover= value
    value = value.to_s
    @attributes['onmouseover'] = value
    value.to_number
  end

  def onmouseover
    @attributes['onmouseover'].to_s.to_number
  end

  #foo

  #foo

  def onmousemove= value
    value = value.to_s
    @attributes['onmousemove'] = value
    value.to_number
  end

  def onmousemove
    @attributes['onmousemove'].to_s.to_number
  end

  #foo

  #foo

  def onmouseout= value
    value = value.to_s
    @attributes['onmouseout'] = value
    value.to_number
  end

  def onmouseout
    @attributes['onmouseout'].to_s.to_number
  end

  #foo

  #foo

  def onload= value
    value = value.to_s
    @attributes['onload'] = value
    value.to_number
  end

  def onload
    @attributes['onload'].to_s.to_number
  end
end

module DocumentEvents

  #foo

  #foo

  def onunload= value
    value = value.to_s
    @attributes['onunload'] = value
    value.to_number
  end

  def onunload
    @attributes['onunload'].to_s.to_number
  end

  #foo

  #foo

  def onabort= value
    value = value.to_s
    @attributes['onabort'] = value
    value.to_number
  end

  def onabort
    @attributes['onabort'].to_s.to_number
  end

  #foo

  #foo

  def onerror= value
    value = value.to_s
    @attributes['onerror'] = value
    value.to_number
  end

  def onerror
    @attributes['onerror'].to_s.to_number
  end

  #foo

  #foo

  def onresize= value
    value = value.to_s
    @attributes['onresize'] = value
    value.to_number
  end

  def onresize
    @attributes['onresize'].to_s.to_number
  end

  #foo

  #foo

  def onscroll= value
    value = value.to_s
    @attributes['onscroll'] = value
    value.to_number
  end

  def onscroll
    @attributes['onscroll'].to_s.to_number
  end

  #foo

  #foo

  def onzoom= value
    value = value.to_s
    @attributes['onzoom'] = value
    value.to_number
  end

  def onzoom
    @attributes['onzoom'].to_s.to_number
  end
end

module AnimationEvents

  #foo

  #foo

  def onbegin= value
    value = value.to_s
    @attributes['onbegin'] = value
    value.to_number
  end

  def onbegin
    @attributes['onbegin'].to_s.to_number
  end

  #foo

  #foo

  def onend= value
    value = value.to_s
    @attributes['onend'] = value
    value.to_number
  end

  def onend
    @attributes['onend'].to_s.to_number
  end

  #foo

  #foo

  def onrepeat= value
    value = value.to_s
    @attributes['onrepeat'] = value
    value.to_number
  end

  def onrepeat
    @attributes['onrepeat'].to_s.to_number
  end
end

module PresentationAttributes_Color

  #foo

  #foo

  def color= value
    value = value.to_s
    @attributes['color'] = value
    value.to_number
  end

  def color
    @attributes['color'].to_s.to_number
  end

  #foo

  #foo

  def color_interpolation= value
    value = value.to_s
    @attributes['color-interpolation'] = value
    value.to_number
  end

  def color_interpolation
    @attributes['color-interpolation'].to_s.to_number
  end

  #foo

  #foo

  def color_rendering= value
    value = value.to_s
    @attributes['color-rendering'] = value
    value.to_number
  end

  def color_rendering
    @attributes['color-rendering'].to_s.to_number
  end
end

module PresentationAttributes_Containers

  #foo

  #foo

  def enable_background= value
    value = value.to_s
    @attributes['enable-background'] = value
    value.to_number
  end

  def enable_background
    @attributes['enable-background'].to_s.to_number
  end
end

module PresentationAttributes_feFlood

  #foo

  #foo

  def flood_color= value
    value = value.to_s
    @attributes['flood-color'] = value
    value.to_number
  end

  def flood_color
    @attributes['flood-color'].to_s.to_number
  end

  #foo

  #foo

  def flood_opacity= value
    value = value.to_s
    @attributes['flood-opacity'] = value
    value.to_number
  end

  def flood_opacity
    @attributes['flood-opacity'].to_s.to_number
  end
end

module PresentationAttributes_FilterPrimitives

  #foo

  #foo

  def color_interpolation_filters= value
    value = value.to_s
    @attributes['color-interpolation-filters'] = value
    value.to_number
  end

  def color_interpolation_filters
    @attributes['color-interpolation-filters'].to_s.to_number
  end
end

module PresentationAttributes_FillStroke

  #foo

  #foo

  def fill= value
    value = value.to_s
    @attributes['fill'] = value
    value.to_number
  end

  def fill
    @attributes['fill'].to_s.to_number
  end

  #foo

  #foo

  def fill_opacity= value
    value = value.to_s
    @attributes['fill-opacity'] = value
    value.to_number
  end

  def fill_opacity
    @attributes['fill-opacity'].to_s.to_number
  end

  #foo

  #foo

  def fill_rule= value
    value = value.to_s
    @attributes['fill-rule'] = value
    value.to_number
  end

  def fill_rule
    @attributes['fill-rule'].to_s.to_number
  end

  #foo

  #foo

  def stroke= value
    value = value.to_s
    @attributes['stroke'] = value
    value.to_number
  end

  def stroke
    @attributes['stroke'].to_s.to_number
  end

  #foo

  #foo

  def stroke_dasharray= value
    value = value.to_s
    @attributes['stroke-dasharray'] = value
    value.to_number
  end

  def stroke_dasharray
    @attributes['stroke-dasharray'].to_s.to_number
  end

  #foo

  #foo

  def stroke_dashoffset= value
    value = value.to_s
    @attributes['stroke-dashoffset'] = value
    value.to_number
  end

  def stroke_dashoffset
    @attributes['stroke-dashoffset'].to_s.to_number
  end

  #foo

  #foo

  def stroke_linecap= value
    value = value.to_s
    @attributes['stroke-linecap'] = value
    value.to_number
  end

  def stroke_linecap
    @attributes['stroke-linecap'].to_s.to_number
  end

  #foo

  #foo

  def stroke_linejoin= value
    value = value.to_s
    @attributes['stroke-linejoin'] = value
    value.to_number
  end

  def stroke_linejoin
    @attributes['stroke-linejoin'].to_s.to_number
  end

  #foo

  #foo

  def stroke_miterlimit= value
    value = value.to_s
    @attributes['stroke-miterlimit'] = value
    value.to_number
  end

  def stroke_miterlimit
    @attributes['stroke-miterlimit'].to_s.to_number
  end

  #foo

  #foo

  def stroke_opacity= value
    value = value.to_s
    @attributes['stroke-opacity'] = value
    value.to_number
  end

  def stroke_opacity
    @attributes['stroke-opacity'].to_s.to_number
  end

  #foo

  #foo

  def stroke_width= value
    value = value.to_s
    @attributes['stroke-width'] = value
    value.to_number
  end

  def stroke_width
    @attributes['stroke-width'].to_s.to_number
  end
end

module PresentationAttributes_FontSpecification

  #foo

  #foo

  def font_family= value
    value = value.to_s
    @attributes['font-family'] = value
    value.to_number
  end

  def font_family
    @attributes['font-family'].to_s.to_number
  end

  #foo

  #foo

  def font_size= value
    value = value.to_s
    @attributes['font-size'] = value
    value.to_number
  end

  def font_size
    @attributes['font-size'].to_s.to_number
  end

  #foo

  #foo

  def font_size_adjust= value
    value = value.to_s
    @attributes['font-size-adjust'] = value
    value.to_number
  end

  def font_size_adjust
    @attributes['font-size-adjust'].to_s.to_number
  end

  #foo

  #foo

  def font_stretch= value
    value = value.to_s
    @attributes['font-stretch'] = value
    value.to_number
  end

  def font_stretch
    @attributes['font-stretch'].to_s.to_number
  end

  #foo

  #foo

  def font_style= value
    value = value.to_s
    @attributes['font-style'] = value
    value.to_number
  end

  def font_style
    @attributes['font-style'].to_s.to_number
  end

  #foo

  #foo

  def font_variant= value
    value = value.to_s
    @attributes['font-variant'] = value
    value.to_number
  end

  def font_variant
    @attributes['font-variant'].to_s.to_number
  end

  #foo

  #foo

  def font_weight= value
    value = value.to_s
    @attributes['font-weight'] = value
    value.to_number
  end

  def font_weight
    @attributes['font-weight'].to_s.to_number
  end
end

module PresentationAttributes_Gradients

  #foo

  #foo

  def stop_color= value
    value = value.to_s
    @attributes['stop-color'] = value
    value.to_number
  end

  def stop_color
    @attributes['stop-color'].to_s.to_number
  end

  #foo

  #foo

  def stop_opacity= value
    value = value.to_s
    @attributes['stop-opacity'] = value
    value.to_number
  end

  def stop_opacity
    @attributes['stop-opacity'].to_s.to_number
  end
end

module PresentationAttributes_Graphics

  #foo

  #foo

  def clip_path= value
    value = value.to_s
    @attributes['clip-path'] = value
    value.to_number
  end

  def clip_path
    @attributes['clip-path'].to_s.to_number
  end

  #foo

  #foo

  def clip_rule= value
    value = value.to_s
    @attributes['clip-rule'] = value
    value.to_number
  end

  def clip_rule
    @attributes['clip-rule'].to_s.to_number
  end

  #foo

  #foo

  def cursor= value
    value = value.to_s
    @attributes['cursor'] = value
    value.to_number
  end

  def cursor
    @attributes['cursor'].to_s.to_number
  end

  #foo

  #foo

  def svg_display= value
    value = value.to_s
    @attributes['display'] = value
    value.to_number
  end

  def svg_display
    @attributes['display'].to_s.to_number
  end

  #foo

  #foo

  def filter= value
    value = value.to_s
    @attributes['filter'] = value
    value.to_number
  end

  def filter
    @attributes['filter'].to_s.to_number
  end

  #foo

  #foo

  def image_rendering= value
    value = value.to_s
    @attributes['image-rendering'] = value
    value.to_number
  end

  def image_rendering
    @attributes['image-rendering'].to_s.to_number
  end

  #foo

  #foo

  def mask= value
    value = value.to_s
    @attributes['mask'] = value
    value.to_number
  end

  def mask
    @attributes['mask'].to_s.to_number
  end

  #foo

  #foo

  def opacity= value
    value = value.to_s
    @attributes['opacity'] = value
    value.to_number
  end

  def opacity
    @attributes['opacity'].to_s.to_number
  end

  #foo

  #foo

  def pointer_events= value
    value = value.to_s
    @attributes['pointer-events'] = value
    value.to_number
  end

  def pointer_events
    @attributes['pointer-events'].to_s.to_number
  end

  #foo

  #foo

  def shape_rendering= value
    value = value.to_s
    @attributes['shape-rendering'] = value
    value.to_number
  end

  def shape_rendering
    @attributes['shape-rendering'].to_s.to_number
  end

  #foo

  #foo

  def text_rendering= value
    value = value.to_s
    @attributes['text-rendering'] = value
    value.to_number
  end

  def text_rendering
    @attributes['text-rendering'].to_s.to_number
  end

  #foo

  #foo

  def visibility= value
    value = value.to_s
    @attributes['visibility'] = value
    value.to_number
  end

  def visibility
    @attributes['visibility'].to_s.to_number
  end
end

module PresentationAttributes_Images

  #foo

  #foo

  def color_profile= value
    value = value.to_s
    @attributes['color-profile'] = value
    value.to_number
  end

  def color_profile
    @attributes['color-profile'].to_s.to_number
  end
end

module PresentationAttributes_LightingEffects

  #foo

  #foo

  def lighting_color= value
    value = value.to_s
    @attributes['lighting-color'] = value
    value.to_number
  end

  def lighting_color
    @attributes['lighting-color'].to_s.to_number
  end
end

module PresentationAttributes_Markers

  #foo

  #foo

  def marker_start= value
    value = value.to_s
    @attributes['marker-start'] = value
    value.to_number
  end

  def marker_start
    @attributes['marker-start'].to_s.to_number
  end

  #foo

  #foo

  def marker_mid= value
    value = value.to_s
    @attributes['marker-mid'] = value
    value.to_number
  end

  def marker_mid
    @attributes['marker-mid'].to_s.to_number
  end

  #foo

  #foo

  def marker_end= value
    value = value.to_s
    @attributes['marker-end'] = value
    value.to_number
  end

  def marker_end
    @attributes['marker-end'].to_s.to_number
  end
end

module PresentationAttributes_TextContentElements

  #foo

  #foo

  def alignment_baseline= value
    value = value.to_s
    @attributes['alignment-baseline'] = value
    value.to_number
  end

  def alignment_baseline
    @attributes['alignment-baseline'].to_s.to_number
  end

  #foo

  #foo

  def baseline_shift= value
    value = value.to_s
    @attributes['baseline-shift'] = value
    value.to_number
  end

  def baseline_shift
    @attributes['baseline-shift'].to_s.to_number
  end

  #foo

  #foo

  def direction= value
    value = value.to_s
    @attributes['direction'] = value
    value.to_number
  end

  def direction
    @attributes['direction'].to_s.to_number
  end

  #foo

  #foo

  def dominant_baseline= value
    value = value.to_s
    @attributes['dominant-baseline'] = value
    value.to_number
  end

  def dominant_baseline
    @attributes['dominant-baseline'].to_s.to_number
  end

  #foo

  #foo

  def glyph_orientation_horizontal= value
    value = value.to_s
    @attributes['glyph-orientation-horizontal'] = value
    value.to_number
  end

  def glyph_orientation_horizontal
    @attributes['glyph-orientation-horizontal'].to_s.to_number
  end

  #foo

  #foo

  def glyph_orientation_vertical= value
    value = value.to_s
    @attributes['glyph-orientation-vertical'] = value
    value.to_number
  end

  def glyph_orientation_vertical
    @attributes['glyph-orientation-vertical'].to_s.to_number
  end

  #foo

  #foo

  def letter_spacing= value
    value = value.to_s
    @attributes['letter-spacing'] = value
    value.to_number
  end

  def letter_spacing
    @attributes['letter-spacing'].to_s.to_number
  end

  #foo

  #foo

  def text_anchor= value
    value = value.to_s
    @attributes['text-anchor'] = value
    value.to_number
  end

  def text_anchor
    @attributes['text-anchor'].to_s.to_number
  end

  #foo

  #foo

  def text_decoration= value
    value = value.to_s
    @attributes['text-decoration'] = value
    value.to_number
  end

  def text_decoration
    @attributes['text-decoration'].to_s.to_number
  end

  #foo

  #foo

  def unicode_bidi= value
    value = value.to_s
    @attributes['unicode-bidi'] = value
    value.to_number
  end

  def unicode_bidi
    @attributes['unicode-bidi'].to_s.to_number
  end

  #foo

  #foo

  def word_spacing= value
    value = value.to_s
    @attributes['word-spacing'] = value
    value.to_number
  end

  def word_spacing
    @attributes['word-spacing'].to_s.to_number
  end
end

module PresentationAttributes_TextElements

  #foo

  #foo

  def writing_mode= value
    value = value.to_s
    @attributes['writing-mode'] = value
    value.to_number
  end

  def writing_mode
    @attributes['writing-mode'].to_s.to_number
  end
end

module PresentationAttributes_Viewports

  #foo

  #foo

  def clip= value
    value = value.to_s
    @attributes['clip'] = value
    value.to_number
  end

  def clip
    @attributes['clip'].to_s.to_number
  end

  #foo

  #foo

  def overflow= value
    value = value.to_s
    @attributes['overflow'] = value
    value.to_number
  end

  def overflow
    @attributes['overflow'].to_s.to_number
  end
end

module PresentationAttributes_All
  include PresentationAttributes_Color
  include PresentationAttributes_Containers
  include PresentationAttributes_feFlood
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FilterPrimitives
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Gradients
  include PresentationAttributes_Graphics
  include PresentationAttributes_Images
  include PresentationAttributes_LightingEffects
  include PresentationAttributes_Markers
  include PresentationAttributes_TextContentElements
  include PresentationAttributes_TextElements
  include PresentationAttributes_Viewports
end

module Filter_primitive_attributes

  #foo

  #foo

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  #foo

  #foo

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  #foo

  #foo

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  #foo

  #foo

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

  #foo

  #foo

  def result= value
    value = value.to_s
    @attributes['result'] = value
    value.to_number
  end

  def result
    @attributes['result'].to_s.to_number
  end
end

module Filter_primitive_attributes_with_in
  include Filter_primitive_attributes

  #foo

  #foo

  def svg_in= value
    value = value.to_s
    @attributes['in'] = value
    value.to_number
  end

  def svg_in
    @attributes['in'].to_s.to_number
  end
end

module Component_transfer_function_attributes

  #foo

  #foo

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

  #foo

  #foo

  def tableValues= value
    value = value.to_s
    @attributes['tableValues'] = value
    value.to_number
  end

  def tableValues
    @attributes['tableValues'].to_s.to_number
  end

  #foo

  #foo

  def slope= value
    value = value.to_s
    @attributes['slope'] = value
    value.to_number
  end

  def slope
    @attributes['slope'].to_s.to_number
  end

  #foo

  #foo

  def intercept= value
    value = value.to_s
    @attributes['intercept'] = value
    value.to_number
  end

  def intercept
    @attributes['intercept'].to_s.to_number
  end

  #foo

  #foo

  def amplitude= value
    value = value.to_s
    @attributes['amplitude'] = value
    value.to_number
  end

  def amplitude
    @attributes['amplitude'].to_s.to_number
  end

  #foo

  #foo

  def exponent= value
    value = value.to_s
    @attributes['exponent'] = value
    value.to_number
  end

  def exponent
    @attributes['exponent'].to_s.to_number
  end

  #foo

  #foo

  def offset= value
    value = value.to_s
    @attributes['offset'] = value
    value.to_number
  end

  def offset
    @attributes['offset'].to_s.to_number
  end
end

module AnimElementAttrs
  include XlinkRefAttrs
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end
end

module AnimAttributeAttrs

  #foo

  #foo

  def attributeName= value
    value = value.to_s
    @attributes['attributeName'] = value
    value.to_number
  end

  def attributeName
    @attributes['attributeName'].to_s.to_number
  end

  #foo

  #foo

  def attributeType= value
    value = value.to_s
    @attributes['attributeType'] = value
    value.to_number
  end

  def attributeType
    @attributes['attributeType'].to_s.to_number
  end
end

module AnimTargetAttrs
  include AnimElementAttrs
  include AnimAttributeAttrs
end

module AnimTimingAttrs

  #foo

  #foo

  def svg_begin= value
    value = value.to_s
    @attributes['begin'] = value
    value.to_number
  end

  def svg_begin
    @attributes['begin'].to_s.to_number
  end

  #foo

  #foo

  def dur= value
    value = value.to_s
    @attributes['dur'] = value
    value.to_number
  end

  def dur
    @attributes['dur'].to_s.to_number
  end

  #foo

  #foo

  def svg_end= value
    value = value.to_s
    @attributes['end'] = value
    value.to_number
  end

  def svg_end
    @attributes['end'].to_s.to_number
  end

  #foo

  #foo

  def svg_min= value
    value = value.to_s
    @attributes['min'] = value
    value.to_number
  end

  def svg_min
    @attributes['min'].to_s.to_number
  end

  #foo

  #foo

  def svg_max= value
    value = value.to_s
    @attributes['max'] = value
    value.to_number
  end

  def svg_max
    @attributes['max'].to_s.to_number
  end

  #foo

  #foo

  def restart= value
    value = value.to_s
    @attributes['restart'] = value
    value.to_number
  end

  def restart
    @attributes['restart'].to_s.to_number
  end

  #foo

  #foo

  def repeatCount= value
    value = value.to_s
    @attributes['repeatCount'] = value
    value.to_number
  end

  def repeatCount
    @attributes['repeatCount'].to_s.to_number
  end

  #foo

  #foo

  def repeatDur= value
    value = value.to_s
    @attributes['repeatDur'] = value
    value.to_number
  end

  def repeatDur
    @attributes['repeatDur'].to_s.to_number
  end

  #foo

  #foo

  def fill= value
    value = value.to_s
    @attributes['fill'] = value
    value.to_number
  end

  def fill
    @attributes['fill'].to_s.to_number
  end
end

module AnimValueAttrs

  #foo

  #foo

  def calcMode= value
    value = value.to_s
    @attributes['calcMode'] = value
    value.to_number
  end

  def calcMode
    @attributes['calcMode'].to_s.to_number
  end

  #foo

  #foo

  def values= value
    value = value.to_s
    @attributes['values'] = value
    value.to_number
  end

  def values
    @attributes['values'].to_s.to_number
  end

  #foo

  #foo

  def keyTimes= value
    value = value.to_s
    @attributes['keyTimes'] = value
    value.to_number
  end

  def keyTimes
    @attributes['keyTimes'].to_s.to_number
  end

  #foo

  #foo

  def keySplines= value
    value = value.to_s
    @attributes['keySplines'] = value
    value.to_number
  end

  def keySplines
    @attributes['keySplines'].to_s.to_number
  end

  #foo

  #foo

  def from= value
    value = value.to_s
    @attributes['from'] = value
    value.to_number
  end

  def from
    @attributes['from'].to_s.to_number
  end

  #foo

  #foo

  def to= value
    value = value.to_s
    @attributes['to'] = value
    value.to_number
  end

  def to
    @attributes['to'].to_s.to_number
  end

  #foo

  #foo

  def by= value
    value = value.to_s
    @attributes['by'] = value
    value.to_number
  end

  def by
    @attributes['by'].to_s.to_number
  end
end

module AnimAdditionAttrs

  #foo

  #foo

  def additive= value
    value = value.to_s
    @attributes['additive'] = value
    value.to_number
  end

  def additive
    @attributes['additive'].to_s.to_number
  end

  #foo

  #foo

  def accumulate= value
    value = value.to_s
    @attributes['accumulate'] = value
    value.to_number
  end

  def accumulate
    @attributes['accumulate'].to_s.to_number
  end
end

#--
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
#++

class Svg < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents
  include DocumentEvents

  # Svg.new => <svg/>
  def initialize
    super('svg')
  end

  # example:
  #  s = Svg.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <svg externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.svg_class=val
  #  print s
  #  # => <svg class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.style=val
  #  print s
  #  # => <svg style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.viewBox=val
  #  print s
  #  # => <svg viewBox='val'/>

  def viewBox= value
    value = value.to_s
    @attributes['viewBox'] = value
    value.to_number
  end

  def viewBox
    @attributes['viewBox'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.preserveAspectRatio=val
  #  print s
  #  # => <svg preserveAspectRatio='val'/>

  def preserveAspectRatio= value
    value = value.to_s
    @attributes['preserveAspectRatio'] = value
    value.to_number
  end

  def preserveAspectRatio
    @attributes['preserveAspectRatio'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.zoomAndPan=val
  #  print s
  #  # => <svg zoomAndPan='val'/>

  def zoomAndPan= value
    value = value.to_s
    @attributes['zoomAndPan'] = value
    value.to_number
  end

  def zoomAndPan
    @attributes['zoomAndPan'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.x=val
  #  print s
  #  # => <svg x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.y=val
  #  print s
  #  # => <svg y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # required
  #
  # example:
  #  s = Svg.new
  #  s.width=val
  #  print s
  #  # => <svg width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # required
  #
  # example:
  #  s = Svg.new
  #  s.height=val
  #  print s
  #  # => <svg height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.contentScriptType=val
  #  print s
  #  # => <svg contentScriptType='val'/>

  def contentScriptType= value
    value = value.to_s
    @attributes['contentScriptType'] = value
    value.to_number
  end

  def contentScriptType
    @attributes['contentScriptType'].to_s.to_number
  end

  # example:
  #  s = Svg.new
  #  s.contentStyleType=val
  #  print s
  #  # => <svg contentStyleType='val'/>

  def contentStyleType= value
    value = value.to_s
    @attributes['contentStyleType'] = value
    value.to_number
  end

  def contentStyleType
    @attributes['contentStyleType'].to_s.to_number
  end

end


class G < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # G.new => <g/>
  def initialize
    super('g')
  end

  # example:
  #  g = G.new
  #  g.externalResourcesRequired=val
  #  print g
  #  # => <g externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  g = G.new
  #  g.svg_class=val
  #  print g
  #  # => <g class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  g = G.new
  #  g.style=val
  #  print g
  #  # => <g style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  g = G.new
  #  g.transform=val
  #  print g
  #  # => <g transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

end


class Defs < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # Defs.new => <defs/>
  def initialize
    super('defs')
  end

  # example:
  #  d = Defs.new
  #  d.externalResourcesRequired=val
  #  print d
  #  # => <defs externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  d = Defs.new
  #  d.svg_class=val
  #  print d
  #  # => <defs class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  d = Defs.new
  #  d.style=val
  #  print d
  #  # => <defs style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  d = Defs.new
  #  d.transform=val
  #  print d
  #  # => <defs transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

end


class Desc < Element

  include Utils
  include StdAttrs
  include LangSpaceAttrs

  # Desc.new => <desc/>
  def initialize
    super('desc')
  end

  # example:
  #  d = Desc.new
  #  d.svg_class=val
  #  print d
  #  # => <desc class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  d = Desc.new
  #  d.style=val
  #  print d
  #  # => <desc style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  d = Desc.new
  #  d.content=val
  #  print d
  #  # => <desc content='val'/>

  def content= value
    value = value.to_s
    @attributes['content'] = value
    value.to_number
  end

  def content
    @attributes['content'].to_s.to_number
  end

end


class Title < Element

  include Utils
  include StdAttrs
  include LangSpaceAttrs

  # Title.new => <title/>
  def initialize
    super('title')
  end

  # example:
  #  t = Title.new
  #  t.svg_class=val
  #  print t
  #  # => <title class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  t = Title.new
  #  t.style=val
  #  print t
  #  # => <title style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  t = Title.new
  #  t.content=val
  #  print t
  #  # => <title content='val'/>

  def content= value
    value = value.to_s
    @attributes['content'] = value
    value.to_number
  end

  def content
    @attributes['content'].to_s.to_number
  end

end


class Svg_Symbol < Element

  include Utils
  include StdAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # Svg_Symbol.new => <symbol/>
  def initialize
    super('symbol')
  end

  # example:
  #  s = Svg_Symbol.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <symbol externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  s = Svg_Symbol.new
  #  s.svg_class=val
  #  print s
  #  # => <symbol class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  s = Svg_Symbol.new
  #  s.style=val
  #  print s
  #  # => <symbol style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  s = Svg_Symbol.new
  #  s.viewBox=val
  #  print s
  #  # => <symbol viewBox='val'/>

  def viewBox= value
    value = value.to_s
    @attributes['viewBox'] = value
    value.to_number
  end

  def viewBox
    @attributes['viewBox'].to_s.to_number
  end

  # example:
  #  s = Svg_Symbol.new
  #  s.preserveAspectRatio=val
  #  print s
  #  # => <symbol preserveAspectRatio='val'/>

  def preserveAspectRatio= value
    value = value.to_s
    @attributes['preserveAspectRatio'] = value
    value.to_number
  end

  def preserveAspectRatio
    @attributes['preserveAspectRatio'].to_s.to_number
  end

end


class Use < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrsEmbed
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # Use.new => <use/>
  def initialize
    super('use')
  end

  # example:
  #  u = Use.new
  #  u.externalResourcesRequired=val
  #  print u
  #  # => <use externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.svg_class=val
  #  print u
  #  # => <use class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.style=val
  #  print u
  #  # => <use style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.transform=val
  #  print u
  #  # => <use transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.x=val
  #  print u
  #  # => <use x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.y=val
  #  print u
  #  # => <use y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.width=val
  #  print u
  #  # => <use width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # example:
  #  u = Use.new
  #  u.height=val
  #  print u
  #  # => <use height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Image < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include TestAttrs
  include PresentationAttributes_Color
  include LangSpaceAttrs
  include PresentationAttributes_Graphics
  include PresentationAttributes_Viewports
  include GraphicsElementEvents

  # Image.new => <image/>
  def initialize
    super('image')
  end

  # example:
  #  i = Image.new
  #  i.externalResourcesRequired=val
  #  print i
  #  # => <image externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  i = Image.new
  #  i.svg_class=val
  #  print i
  #  # => <image class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  i = Image.new
  #  i.style=val
  #  print i
  #  # => <image style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  i = Image.new
  #  i.transform=val
  #  print i
  #  # => <image transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  i = Image.new
  #  i.x=val
  #  print i
  #  # => <image x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  i = Image.new
  #  i.y=val
  #  print i
  #  # => <image y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # required
  #
  # example:
  #  i = Image.new
  #  i.width=val
  #  print i
  #  # => <image width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # required
  #
  # example:
  #  i = Image.new
  #  i.height=val
  #  print i
  #  # => <image height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Switch < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # Switch.new => <switch/>
  def initialize
    super('switch')
  end

  # example:
  #  s = Switch.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <switch externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  s = Switch.new
  #  s.svg_class=val
  #  print s
  #  # => <switch class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  s = Switch.new
  #  s.style=val
  #  print s
  #  # => <switch style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  s = Switch.new
  #  s.transform=val
  #  print s
  #  # => <switch transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

end


class Style < Element

  include Utils
  include StdAttrs

  # Style.new => <style/>
  def initialize
    super('style')
  end

  # required
  #
  # example:
  #  s = Style.new
  #  s.svg_type=val
  #  print s
  #  # => <style type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

  # example:
  #  s = Style.new
  #  s.media=val
  #  print s
  #  # => <style media='val'/>

  def media= value
    value = value.to_s
    @attributes['media'] = value
    value.to_number
  end

  def media
    @attributes['media'].to_s.to_number
  end

  # example:
  #  s = Style.new
  #  s.title=val
  #  print s
  #  # => <style title='val'/>

  def title= value
    value = value.to_s
    @attributes['title'] = value
    value.to_number
  end

  def title
    @attributes['title'].to_s.to_number
  end
#foofoo
  def xml_space= value
    value = value.to_s
    @attributes['xml:space'] = value
    value.to_number
  end

  def xml_space
    @attributes['space'].to_s.to_number
  end

end


class Path < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include PresentationAttributes_Markers
  include GraphicsElementEvents

  # Path.new => <path/>
  def initialize
    super('path')
  end

  # example:
  #  p = Path.new
  #  p.externalResourcesRequired=val
  #  print p
  #  # => <path externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  p = Path.new
  #  p.svg_class=val
  #  print p
  #  # => <path class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  p = Path.new
  #  p.style=val
  #  print p
  #  # => <path style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  p = Path.new
  #  p.transform=val
  #  print p
  #  # => <path transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # required
  #
  # example:
  #  p = Path.new
  #  p.d=val
  #  print p
  #  # => <path d='val'/>

  def d= value
    value = value.to_s
    @attributes['d'] = value
    value.to_number
  end

  def d
    @attributes['d'].to_s.to_number
  end

  # example:
  #  p = Path.new
  #  p.pathLength=val
  #  print p
  #  # => <path pathLength='val'/>

  def pathLength= value
    value = value.to_s
    @attributes['pathLength'] = value
    value.to_number
  end

  def pathLength
    @attributes['pathLength'].to_s.to_number
  end

end


class Rect < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include GraphicsElementEvents

  # Rect.new => <rect/>
  def initialize
    super('rect')
  end

  # example:
  #  r = Rect.new
  #  r.externalResourcesRequired=val
  #  print r
  #  # => <rect externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.svg_class=val
  #  print r
  #  # => <rect class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.style=val
  #  print r
  #  # => <rect style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.transform=val
  #  print r
  #  # => <rect transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.x=val
  #  print r
  #  # => <rect x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.y=val
  #  print r
  #  # => <rect y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # required
  #
  # example:
  #  r = Rect.new
  #  r.width=val
  #  print r
  #  # => <rect width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # required
  #
  # example:
  #  r = Rect.new
  #  r.height=val
  #  print r
  #  # => <rect height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.rx=val
  #  print r
  #  # => <rect rx='val'/>

  def rx= value
    value = value.to_s
    @attributes['rx'] = value
    value.to_number
  end

  def rx
    @attributes['rx'].to_s.to_number
  end

  # example:
  #  r = Rect.new
  #  r.ry=val
  #  print r
  #  # => <rect ry='val'/>

  def ry= value
    value = value.to_s
    @attributes['ry'] = value
    value.to_number
  end

  def ry
    @attributes['ry'].to_s.to_number
  end

end


class Circle < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include GraphicsElementEvents

  # Circle.new => <circle/>
  def initialize
    super('circle')
  end

  # example:
  #  c = Circle.new
  #  c.externalResourcesRequired=val
  #  print c
  #  # => <circle externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  c = Circle.new
  #  c.svg_class=val
  #  print c
  #  # => <circle class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  c = Circle.new
  #  c.style=val
  #  print c
  #  # => <circle style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  c = Circle.new
  #  c.transform=val
  #  print c
  #  # => <circle transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  c = Circle.new
  #  c.cx=val
  #  print c
  #  # => <circle cx='val'/>

  def cx= value
    value = value.to_s
    @attributes['cx'] = value
    value.to_number
  end

  def cx
    @attributes['cx'].to_s.to_number
  end

  # example:
  #  c = Circle.new
  #  c.cy=val
  #  print c
  #  # => <circle cy='val'/>

  def cy= value
    value = value.to_s
    @attributes['cy'] = value
    value.to_number
  end

  def cy
    @attributes['cy'].to_s.to_number
  end

  # required
  #
  # example:
  #  c = Circle.new
  #  c.r=val
  #  print c
  #  # => <circle r='val'/>

  def r= value
    value = value.to_s
    @attributes['r'] = value
    value.to_number
  end

  def r
    @attributes['r'].to_s.to_number
  end

end


class Ellipse < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include GraphicsElementEvents

  # Ellipse.new => <ellipse/>
  def initialize
    super('ellipse')
  end

  # example:
  #  e = Ellipse.new
  #  e.externalResourcesRequired=val
  #  print e
  #  # => <ellipse externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  e = Ellipse.new
  #  e.svg_class=val
  #  print e
  #  # => <ellipse class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  e = Ellipse.new
  #  e.style=val
  #  print e
  #  # => <ellipse style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  e = Ellipse.new
  #  e.transform=val
  #  print e
  #  # => <ellipse transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  e = Ellipse.new
  #  e.cx=val
  #  print e
  #  # => <ellipse cx='val'/>

  def cx= value
    value = value.to_s
    @attributes['cx'] = value
    value.to_number
  end

  def cx
    @attributes['cx'].to_s.to_number
  end

  # example:
  #  e = Ellipse.new
  #  e.cy=val
  #  print e
  #  # => <ellipse cy='val'/>

  def cy= value
    value = value.to_s
    @attributes['cy'] = value
    value.to_number
  end

  def cy
    @attributes['cy'].to_s.to_number
  end

  # required
  #
  # example:
  #  e = Ellipse.new
  #  e.rx=val
  #  print e
  #  # => <ellipse rx='val'/>

  def rx= value
    value = value.to_s
    @attributes['rx'] = value
    value.to_number
  end

  def rx
    @attributes['rx'].to_s.to_number
  end

  # required
  #
  # example:
  #  e = Ellipse.new
  #  e.ry=val
  #  print e
  #  # => <ellipse ry='val'/>

  def ry= value
    value = value.to_s
    @attributes['ry'] = value
    value.to_number
  end

  def ry
    @attributes['ry'].to_s.to_number
  end

end


class Line < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include PresentationAttributes_Markers
  include GraphicsElementEvents

  # Line.new => <line/>
  def initialize
    super('line')
  end

  # example:
  #  l = Line.new
  #  l.externalResourcesRequired=val
  #  print l
  #  # => <line externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.svg_class=val
  #  print l
  #  # => <line class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.style=val
  #  print l
  #  # => <line style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.transform=val
  #  print l
  #  # => <line transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.x1=val
  #  print l
  #  # => <line x1='val'/>

  def x1= value
    value = value.to_s
    @attributes['x1'] = value
    value.to_number
  end

  def x1
    @attributes['x1'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.y1=val
  #  print l
  #  # => <line y1='val'/>

  def y1= value
    value = value.to_s
    @attributes['y1'] = value
    value.to_number
  end

  def y1
    @attributes['y1'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.x2=val
  #  print l
  #  # => <line x2='val'/>

  def x2= value
    value = value.to_s
    @attributes['x2'] = value
    value.to_number
  end

  def x2
    @attributes['x2'].to_s.to_number
  end

  # example:
  #  l = Line.new
  #  l.y2=val
  #  print l
  #  # => <line y2='val'/>

  def y2= value
    value = value.to_s
    @attributes['y2'] = value
    value.to_number
  end

  def y2
    @attributes['y2'].to_s.to_number
  end

end


class Polyline < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include PresentationAttributes_Markers
  include GraphicsElementEvents

  # Polyline.new => <polyline/>
  def initialize
    super('polyline')
  end

  # example:
  #  p = Polyline.new
  #  p.externalResourcesRequired=val
  #  print p
  #  # => <polyline externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  p = Polyline.new
  #  p.svg_class=val
  #  print p
  #  # => <polyline class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  p = Polyline.new
  #  p.style=val
  #  print p
  #  # => <polyline style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  p = Polyline.new
  #  p.transform=val
  #  print p
  #  # => <polyline transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # required
  #
  # example:
  #  p = Polyline.new
  #  p.points=val
  #  print p
  #  # => <polyline points='val'/>

  def points= value
    value = value.to_s
    @attributes['points'] = value
    value.to_number
  end

  def points
    @attributes['points'].to_s.to_number
  end

end


class Polygon < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_Graphics
  include PresentationAttributes_Markers
  include GraphicsElementEvents

  # Polygon.new => <polygon/>
  def initialize
    super('polygon')
  end

  # example:
  #  p = Polygon.new
  #  p.externalResourcesRequired=val
  #  print p
  #  # => <polygon externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  p = Polygon.new
  #  p.svg_class=val
  #  print p
  #  # => <polygon class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  p = Polygon.new
  #  p.style=val
  #  print p
  #  # => <polygon style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  p = Polygon.new
  #  p.transform=val
  #  print p
  #  # => <polygon transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # required
  #
  # example:
  #  p = Polygon.new
  #  p.points=val
  #  print p
  #  # => <polygon points='val'/>

  def points= value
    value = value.to_s
    @attributes['points'] = value
    value.to_number
  end

  def points
    @attributes['points'].to_s.to_number
  end

end


class Svg_Text < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include PresentationAttributes_TextElements
  include GraphicsElementEvents

  # Svg_Text.new => <text/>
  def initialize
    super('text')
  end

  # example:
  #  s = Svg_Text.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <text externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.svg_class=val
  #  print s
  #  # => <text class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.style=val
  #  print s
  #  # => <text style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.transform=val
  #  print s
  #  # => <text transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.x=val
  #  print s
  #  # => <text x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.y=val
  #  print s
  #  # => <text y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.textLength=val
  #  print s
  #  # => <text textLength='val'/>

  def textLength= value
    value = value.to_s
    @attributes['textLength'] = value
    value.to_number
  end

  def textLength
    @attributes['textLength'].to_s.to_number
  end

  # example:
  #  s = Svg_Text.new
  #  s.lengthAdjust=val
  #  print s
  #  # => <text lengthAdjust='val'/>

  def lengthAdjust= value
    value = value.to_s
    @attributes['lengthAdjust'] = value
    value.to_number
  end

  def lengthAdjust
    @attributes['lengthAdjust'].to_s.to_number
  end

end


class Tspan < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include GraphicsElementEvents

  # Tspan.new => <tspan/>
  def initialize
    super('tspan')
  end

  # example:
  #  t = Tspan.new
  #  t.externalResourcesRequired=val
  #  print t
  #  # => <tspan externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.svg_class=val
  #  print t
  #  # => <tspan class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.style=val
  #  print t
  #  # => <tspan style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.x=val
  #  print t
  #  # => <tspan x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.y=val
  #  print t
  #  # => <tspan y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.dx=val
  #  print t
  #  # => <tspan dx='val'/>

  def dx= value
    value = value.to_s
    @attributes['dx'] = value
    value.to_number
  end

  def dx
    @attributes['dx'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.dy=val
  #  print t
  #  # => <tspan dy='val'/>

  def dy= value
    value = value.to_s
    @attributes['dy'] = value
    value.to_number
  end

  def dy
    @attributes['dy'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.rotate=val
  #  print t
  #  # => <tspan rotate='val'/>

  def rotate= value
    value = value.to_s
    @attributes['rotate'] = value
    value.to_number
  end

  def rotate
    @attributes['rotate'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.textLength=val
  #  print t
  #  # => <tspan textLength='val'/>

  def textLength= value
    value = value.to_s
    @attributes['textLength'] = value
    value.to_number
  end

  def textLength
    @attributes['textLength'].to_s.to_number
  end

  # example:
  #  t = Tspan.new
  #  t.lengthAdjust=val
  #  print t
  #  # => <tspan lengthAdjust='val'/>

  def lengthAdjust= value
    value = value.to_s
    @attributes['lengthAdjust'] = value
    value.to_number
  end

  def lengthAdjust
    @attributes['lengthAdjust'].to_s.to_number
  end

end


class Tref < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include GraphicsElementEvents

  # Tref.new => <tref/>
  def initialize
    super('tref')
  end

  # example:
  #  t = Tref.new
  #  t.externalResourcesRequired=val
  #  print t
  #  # => <tref externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.svg_class=val
  #  print t
  #  # => <tref class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.style=val
  #  print t
  #  # => <tref style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.x=val
  #  print t
  #  # => <tref x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.y=val
  #  print t
  #  # => <tref y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.dx=val
  #  print t
  #  # => <tref dx='val'/>

  def dx= value
    value = value.to_s
    @attributes['dx'] = value
    value.to_number
  end

  def dx
    @attributes['dx'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.dy=val
  #  print t
  #  # => <tref dy='val'/>

  def dy= value
    value = value.to_s
    @attributes['dy'] = value
    value.to_number
  end

  def dy
    @attributes['dy'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.rotate=val
  #  print t
  #  # => <tref rotate='val'/>

  def rotate= value
    value = value.to_s
    @attributes['rotate'] = value
    value.to_number
  end

  def rotate
    @attributes['rotate'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.textLength=val
  #  print t
  #  # => <tref textLength='val'/>

  def textLength= value
    value = value.to_s
    @attributes['textLength'] = value
    value.to_number
  end

  def textLength
    @attributes['textLength'].to_s.to_number
  end

  # example:
  #  t = Tref.new
  #  t.lengthAdjust=val
  #  print t
  #  # => <tref lengthAdjust='val'/>

  def lengthAdjust= value
    value = value.to_s
    @attributes['lengthAdjust'] = value
    value.to_number
  end

  def lengthAdjust
    @attributes['lengthAdjust'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class TextPath < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include LangSpaceAttrs
  include TestAttrs
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include GraphicsElementEvents

  # TextPath.new => <textPath/>
  def initialize
    super('textPath')
  end

  # example:
  #  t = TextPath.new
  #  t.externalResourcesRequired=val
  #  print t
  #  # => <textPath externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.svg_class=val
  #  print t
  #  # => <textPath class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.style=val
  #  print t
  #  # => <textPath style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.startOffset=val
  #  print t
  #  # => <textPath startOffset='val'/>

  def startOffset= value
    value = value.to_s
    @attributes['startOffset'] = value
    value.to_number
  end

  def startOffset
    @attributes['startOffset'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.textLength=val
  #  print t
  #  # => <textPath textLength='val'/>

  def textLength= value
    value = value.to_s
    @attributes['textLength'] = value
    value.to_number
  end

  def textLength
    @attributes['textLength'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.lengthAdjust=val
  #  print t
  #  # => <textPath lengthAdjust='val'/>

  def lengthAdjust= value
    value = value.to_s
    @attributes['lengthAdjust'] = value
    value.to_number
  end

  def lengthAdjust
    @attributes['lengthAdjust'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.svg_method=val
  #  print t
  #  # => <textPath method='val'/>

  def svg_method= value
    value = value.to_s
    @attributes['method'] = value
    value.to_number
  end

  def svg_method
    @attributes['method'].to_s.to_number
  end

  # example:
  #  t = TextPath.new
  #  t.spacing=val
  #  print t
  #  # => <textPath spacing='val'/>

  def spacing= value
    value = value.to_s
    @attributes['spacing'] = value
    value.to_number
  end

  def spacing
    @attributes['spacing'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class AltGlyph < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_Color
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include GraphicsElementEvents

  # AltGlyph.new => <altGlyph/>
  def initialize
    super('altGlyph')
  end

  # example:
  #  a = AltGlyph.new
  #  a.glyphRef=val
  #  print a
  #  # => <altGlyph glyphRef='val'/>

  def glyphRef= value
    value = value.to_s
    @attributes['glyphRef'] = value
    value.to_number
  end

  def glyphRef
    @attributes['glyphRef'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.format=val
  #  print a
  #  # => <altGlyph format='val'/>

  def format= value
    value = value.to_s
    @attributes['format'] = value
    value.to_number
  end

  def format
    @attributes['format'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <altGlyph externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.svg_class=val
  #  print a
  #  # => <altGlyph class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.style=val
  #  print a
  #  # => <altGlyph style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.x=val
  #  print a
  #  # => <altGlyph x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.y=val
  #  print a
  #  # => <altGlyph y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.dx=val
  #  print a
  #  # => <altGlyph dx='val'/>

  def dx= value
    value = value.to_s
    @attributes['dx'] = value
    value.to_number
  end

  def dx
    @attributes['dx'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.dy=val
  #  print a
  #  # => <altGlyph dy='val'/>

  def dy= value
    value = value.to_s
    @attributes['dy'] = value
    value.to_number
  end

  def dy
    @attributes['dy'].to_s.to_number
  end

  # example:
  #  a = AltGlyph.new
  #  a.rotate=val
  #  print a
  #  # => <altGlyph rotate='val'/>

  def rotate= value
    value = value.to_s
    @attributes['rotate'] = value
    value.to_number
  end

  def rotate
    @attributes['rotate'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class AltGlyphDef < Element

  include Utils
  include StdAttrs

  # AltGlyphDef.new => <altGlyphDef/>
  def initialize
    super('altGlyphDef')
  end

end


class AltGlyphItem < Element

  include Utils
  include StdAttrs

  # AltGlyphItem.new => <altGlyphItem/>
  def initialize
    super('altGlyphItem')
  end

end


class GlyphRef < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include PresentationAttributes_FontSpecification

  # GlyphRef.new => <glyphRef/>
  def initialize
    super('glyphRef')
  end

  # example:
  #  g = GlyphRef.new
  #  g.svg_class=val
  #  print g
  #  # => <glyphRef class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  g = GlyphRef.new
  #  g.style=val
  #  print g
  #  # => <glyphRef style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # required
  #
  # example:
  #  g = GlyphRef.new
  #  g.glyphRef=val
  #  print g
  #  # => <glyphRef glyphRef='val'/>

  def glyphRef= value
    value = value.to_s
    @attributes['glyphRef'] = value
    value.to_number
  end

  def glyphRef
    @attributes['glyphRef'].to_s.to_number
  end

  # required
  #
  # example:
  #  g = GlyphRef.new
  #  g.format=val
  #  print g
  #  # => <glyphRef format='val'/>

  def format= value
    value = value.to_s
    @attributes['format'] = value
    value.to_number
  end

  def format
    @attributes['format'].to_s.to_number
  end

  # example:
  #  g = GlyphRef.new
  #  g.x=val
  #  print g
  #  # => <glyphRef x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  g = GlyphRef.new
  #  g.y=val
  #  print g
  #  # => <glyphRef y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  g = GlyphRef.new
  #  g.dx=val
  #  print g
  #  # => <glyphRef dx='val'/>

  def dx= value
    value = value.to_s
    @attributes['dx'] = value
    value.to_number
  end

  def dx
    @attributes['dx'].to_s.to_number
  end

  # example:
  #  g = GlyphRef.new
  #  g.dy=val
  #  print g
  #  # => <glyphRef dy='val'/>

  def dy= value
    value = value.to_s
    @attributes['dy'] = value
    value.to_number
  end

  def dy
    @attributes['dy'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Marker < Element

  include Utils
  include StdAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All

  # Marker.new => <marker/>
  def initialize
    super('marker')
  end

  # example:
  #  m = Marker.new
  #  m.externalResourcesRequired=val
  #  print m
  #  # => <marker externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.svg_class=val
  #  print m
  #  # => <marker class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.style=val
  #  print m
  #  # => <marker style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.viewBox=val
  #  print m
  #  # => <marker viewBox='val'/>

  def viewBox= value
    value = value.to_s
    @attributes['viewBox'] = value
    value.to_number
  end

  def viewBox
    @attributes['viewBox'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.preserveAspectRatio=val
  #  print m
  #  # => <marker preserveAspectRatio='val'/>

  def preserveAspectRatio= value
    value = value.to_s
    @attributes['preserveAspectRatio'] = value
    value.to_number
  end

  def preserveAspectRatio
    @attributes['preserveAspectRatio'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.refX=val
  #  print m
  #  # => <marker refX='val'/>

  def refX= value
    value = value.to_s
    @attributes['refX'] = value
    value.to_number
  end

  def refX
    @attributes['refX'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.refY=val
  #  print m
  #  # => <marker refY='val'/>

  def refY= value
    value = value.to_s
    @attributes['refY'] = value
    value.to_number
  end

  def refY
    @attributes['refY'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.markerUnits=val
  #  print m
  #  # => <marker markerUnits='val'/>

  def markerUnits= value
    value = value.to_s
    @attributes['markerUnits'] = value
    value.to_number
  end

  def markerUnits
    @attributes['markerUnits'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.markerWidth=val
  #  print m
  #  # => <marker markerWidth='val'/>

  def markerWidth= value
    value = value.to_s
    @attributes['markerWidth'] = value
    value.to_number
  end

  def markerWidth
    @attributes['markerWidth'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.markerHeight=val
  #  print m
  #  # => <marker markerHeight='val'/>

  def markerHeight= value
    value = value.to_s
    @attributes['markerHeight'] = value
    value.to_number
  end

  def markerHeight
    @attributes['markerHeight'].to_s.to_number
  end

  # example:
  #  m = Marker.new
  #  m.orient=val
  #  print m
  #  # => <marker orient='val'/>

  def orient= value
    value = value.to_s
    @attributes['orient'] = value
    value.to_number
  end

  def orient
    @attributes['orient'].to_s.to_number
  end

end


class Color_profile < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # Color_profile.new => <color-profile/>
  def initialize
    super('color-profile')
  end

  # example:
  #  c = Color_profile.new
  #  c.local=val
  #  print c
  #  # => <color-profile local='val'/>

  def local= value
    value = value.to_s
    @attributes['local'] = value
    value.to_number
  end

  def local
    @attributes['local'].to_s.to_number
  end

  # required
  #
  # example:
  #  c = Color_profile.new
  #  c.svg_name=val
  #  print c
  #  # => <color-profile name='val'/>

  def svg_name= value
    value = value.to_s
    @attributes['name'] = value
    value.to_number
  end

  def svg_name
    @attributes['name'].to_s.to_number
  end

  # example:
  #  c = Color_profile.new
  #  c.rendering_intent=val
  #  print c
  #  # => <color-profile rendering-intent='val'/>

  def rendering_intent= value
    value = value.to_s
    @attributes['rendering-intent'] = value
    value.to_number
  end

  def rendering_intent
    @attributes['rendering-intent'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class LinearGradient < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # LinearGradient.new => <linearGradient/>
  def initialize
    super('linearGradient')
  end

  # example:
  #  l = LinearGradient.new
  #  l.externalResourcesRequired=val
  #  print l
  #  # => <linearGradient externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.svg_class=val
  #  print l
  #  # => <linearGradient class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.style=val
  #  print l
  #  # => <linearGradient style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.gradientUnits=val
  #  print l
  #  # => <linearGradient gradientUnits='val'/>

  def gradientUnits= value
    value = value.to_s
    @attributes['gradientUnits'] = value
    value.to_number
  end

  def gradientUnits
    @attributes['gradientUnits'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.gradientTransform=val
  #  print l
  #  # => <linearGradient gradientTransform='val'/>

  def gradientTransform= value
    value = value.to_s
    @attributes['gradientTransform'] = value
    value.to_number
  end

  def gradientTransform
    @attributes['gradientTransform'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.x1=val
  #  print l
  #  # => <linearGradient x1='val'/>

  def x1= value
    value = value.to_s
    @attributes['x1'] = value
    value.to_number
  end

  def x1
    @attributes['x1'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.y1=val
  #  print l
  #  # => <linearGradient y1='val'/>

  def y1= value
    value = value.to_s
    @attributes['y1'] = value
    value.to_number
  end

  def y1
    @attributes['y1'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.x2=val
  #  print l
  #  # => <linearGradient x2='val'/>

  def x2= value
    value = value.to_s
    @attributes['x2'] = value
    value.to_number
  end

  def x2
    @attributes['x2'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.y2=val
  #  print l
  #  # => <linearGradient y2='val'/>

  def y2= value
    value = value.to_s
    @attributes['y2'] = value
    value.to_number
  end

  def y2
    @attributes['y2'].to_s.to_number
  end

  # example:
  #  l = LinearGradient.new
  #  l.spreadMethod=val
  #  print l
  #  # => <linearGradient spreadMethod='val'/>

  def spreadMethod= value
    value = value.to_s
    @attributes['spreadMethod'] = value
    value.to_number
  end

  def spreadMethod
    @attributes['spreadMethod'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class RadialGradient < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # RadialGradient.new => <radialGradient/>
  def initialize
    super('radialGradient')
  end

  # example:
  #  r = RadialGradient.new
  #  r.externalResourcesRequired=val
  #  print r
  #  # => <radialGradient externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.gradientUnits=val
  #  print r
  #  # => <radialGradient gradientUnits='val'/>

  def gradientUnits= value
    value = value.to_s
    @attributes['gradientUnits'] = value
    value.to_number
  end

  def gradientUnits
    @attributes['gradientUnits'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.gradientTransform=val
  #  print r
  #  # => <radialGradient gradientTransform='val'/>

  def gradientTransform= value
    value = value.to_s
    @attributes['gradientTransform'] = value
    value.to_number
  end

  def gradientTransform
    @attributes['gradientTransform'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.cx=val
  #  print r
  #  # => <radialGradient cx='val'/>

  def cx= value
    value = value.to_s
    @attributes['cx'] = value
    value.to_number
  end

  def cx
    @attributes['cx'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.cy=val
  #  print r
  #  # => <radialGradient cy='val'/>

  def cy= value
    value = value.to_s
    @attributes['cy'] = value
    value.to_number
  end

  def cy
    @attributes['cy'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.r=val
  #  print r
  #  # => <radialGradient r='val'/>

  def r= value
    value = value.to_s
    @attributes['r'] = value
    value.to_number
  end

  def r
    @attributes['r'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.fx=val
  #  print r
  #  # => <radialGradient fx='val'/>

  def fx= value
    value = value.to_s
    @attributes['fx'] = value
    value.to_number
  end

  def fx
    @attributes['fx'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.fy=val
  #  print r
  #  # => <radialGradient fy='val'/>

  def fy= value
    value = value.to_s
    @attributes['fy'] = value
    value.to_number
  end

  def fy
    @attributes['fy'].to_s.to_number
  end

  # example:
  #  r = RadialGradient.new
  #  r.spreadMethod=val
  #  print r
  #  # => <radialGradient spreadMethod='val'/>

  def spreadMethod= value
    value = value.to_s
    @attributes['spreadMethod'] = value
    value.to_number
  end

  def spreadMethod
    @attributes['spreadMethod'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Stop < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_Gradients

  # Stop.new => <stop/>
  def initialize
    super('stop')
  end

  # example:
  #  s = Stop.new
  #  s.svg_class=val
  #  print s
  #  # => <stop class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  s = Stop.new
  #  s.style=val
  #  print s
  #  # => <stop style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # required
  #
  # example:
  #  s = Stop.new
  #  s.offset=val
  #  print s
  #  # => <stop offset='val'/>

  def offset= value
    value = value.to_s
    @attributes['offset'] = value
    value.to_number
  end

  def offset
    @attributes['offset'].to_s.to_number
  end

end


class Pattern < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All

  # Pattern.new => <pattern/>
  def initialize
    super('pattern')
  end

  # example:
  #  p = Pattern.new
  #  p.externalResourcesRequired=val
  #  print p
  #  # => <pattern externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.svg_class=val
  #  print p
  #  # => <pattern class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.style=val
  #  print p
  #  # => <pattern style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.viewBox=val
  #  print p
  #  # => <pattern viewBox='val'/>

  def viewBox= value
    value = value.to_s
    @attributes['viewBox'] = value
    value.to_number
  end

  def viewBox
    @attributes['viewBox'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.preserveAspectRatio=val
  #  print p
  #  # => <pattern preserveAspectRatio='val'/>

  def preserveAspectRatio= value
    value = value.to_s
    @attributes['preserveAspectRatio'] = value
    value.to_number
  end

  def preserveAspectRatio
    @attributes['preserveAspectRatio'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.patternUnits=val
  #  print p
  #  # => <pattern patternUnits='val'/>

  def patternUnits= value
    value = value.to_s
    @attributes['patternUnits'] = value
    value.to_number
  end

  def patternUnits
    @attributes['patternUnits'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.patternTransform=val
  #  print p
  #  # => <pattern patternTransform='val'/>

  def patternTransform= value
    value = value.to_s
    @attributes['patternTransform'] = value
    value.to_number
  end

  def patternTransform
    @attributes['patternTransform'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.x=val
  #  print p
  #  # => <pattern x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  p = Pattern.new
  #  p.y=val
  #  print p
  #  # => <pattern y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # required
  #
  # example:
  #  p = Pattern.new
  #  p.width=val
  #  print p
  #  # => <pattern width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # required
  #
  # example:
  #  p = Pattern.new
  #  p.height=val
  #  print p
  #  # => <pattern height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class ClipPath < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_FillStroke
  include PresentationAttributes_FontSpecification
  include PresentationAttributes_Graphics
  include PresentationAttributes_TextContentElements
  include PresentationAttributes_TextElements

  # ClipPath.new => <clipPath/>
  def initialize
    super('clipPath')
  end

  # example:
  #  c = ClipPath.new
  #  c.externalResourcesRequired=val
  #  print c
  #  # => <clipPath externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  c = ClipPath.new
  #  c.svg_class=val
  #  print c
  #  # => <clipPath class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  c = ClipPath.new
  #  c.style=val
  #  print c
  #  # => <clipPath style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  c = ClipPath.new
  #  c.transform=val
  #  print c
  #  # => <clipPath transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  c = ClipPath.new
  #  c.clipPathUnits=val
  #  print c
  #  # => <clipPath clipPathUnits='val'/>

  def clipPathUnits= value
    value = value.to_s
    @attributes['clipPathUnits'] = value
    value.to_number
  end

  def clipPathUnits
    @attributes['clipPathUnits'].to_s.to_number
  end

end


class Mask < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All

  # Mask.new => <mask/>
  def initialize
    super('mask')
  end

  # example:
  #  m = Mask.new
  #  m.externalResourcesRequired=val
  #  print m
  #  # => <mask externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.svg_class=val
  #  print m
  #  # => <mask class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.style=val
  #  print m
  #  # => <mask style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.transform=val
  #  print m
  #  # => <mask transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.maskUnits=val
  #  print m
  #  # => <mask maskUnits='val'/>

  def maskUnits= value
    value = value.to_s
    @attributes['maskUnits'] = value
    value.to_number
  end

  def maskUnits
    @attributes['maskUnits'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.x=val
  #  print m
  #  # => <mask x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.y=val
  #  print m
  #  # => <mask y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.width=val
  #  print m
  #  # => <mask width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # example:
  #  m = Mask.new
  #  m.height=val
  #  print m
  #  # => <mask height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

end


class Filter < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All

  # Filter.new => <filter/>
  def initialize
    super('filter')
  end

  # example:
  #  f = Filter.new
  #  f.externalResourcesRequired=val
  #  print f
  #  # => <filter externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.svg_class=val
  #  print f
  #  # => <filter class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.style=val
  #  print f
  #  # => <filter style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.filterUnits=val
  #  print f
  #  # => <filter filterUnits='val'/>

  def filterUnits= value
    value = value.to_s
    @attributes['filterUnits'] = value
    value.to_number
  end

  def filterUnits
    @attributes['filterUnits'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.primitiveUnits=val
  #  print f
  #  # => <filter primitiveUnits='val'/>

  def primitiveUnits= value
    value = value.to_s
    @attributes['primitiveUnits'] = value
    value.to_number
  end

  def primitiveUnits
    @attributes['primitiveUnits'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.x=val
  #  print f
  #  # => <filter x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.y=val
  #  print f
  #  # => <filter y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.width=val
  #  print f
  #  # => <filter width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.height=val
  #  print f
  #  # => <filter height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

  # example:
  #  f = Filter.new
  #  f.filterRes=val
  #  print f
  #  # => <filter filterRes='val'/>

  def filterRes= value
    value = value.to_s
    @attributes['filterRes'] = value
    value.to_number
  end

  def filterRes
    @attributes['filterRes'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class FeDistantLight < Element

  include Utils
  include StdAttrs

  # FeDistantLight.new => <feDistantLight/>
  def initialize
    super('feDistantLight')
  end

  # example:
  #  f = FeDistantLight.new
  #  f.azimuth=val
  #  print f
  #  # => <feDistantLight azimuth='val'/>

  def azimuth= value
    value = value.to_s
    @attributes['azimuth'] = value
    value.to_number
  end

  def azimuth
    @attributes['azimuth'].to_s.to_number
  end

  # example:
  #  f = FeDistantLight.new
  #  f.elevation=val
  #  print f
  #  # => <feDistantLight elevation='val'/>

  def elevation= value
    value = value.to_s
    @attributes['elevation'] = value
    value.to_number
  end

  def elevation
    @attributes['elevation'].to_s.to_number
  end

end


class FePointLight < Element

  include Utils
  include StdAttrs

  # FePointLight.new => <fePointLight/>
  def initialize
    super('fePointLight')
  end

  # example:
  #  f = FePointLight.new
  #  f.x=val
  #  print f
  #  # => <fePointLight x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  f = FePointLight.new
  #  f.y=val
  #  print f
  #  # => <fePointLight y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  f = FePointLight.new
  #  f.z=val
  #  print f
  #  # => <fePointLight z='val'/>

  def z= value
    value = value.to_s
    @attributes['z'] = value
    value.to_number
  end

  def z
    @attributes['z'].to_s.to_number
  end

end


class FeSpotLight < Element

  include Utils
  include StdAttrs

  # FeSpotLight.new => <feSpotLight/>
  def initialize
    super('feSpotLight')
  end

  # example:
  #  f = FeSpotLight.new
  #  f.x=val
  #  print f
  #  # => <feSpotLight x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.y=val
  #  print f
  #  # => <feSpotLight y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.z=val
  #  print f
  #  # => <feSpotLight z='val'/>

  def z= value
    value = value.to_s
    @attributes['z'] = value
    value.to_number
  end

  def z
    @attributes['z'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.pointsAtX=val
  #  print f
  #  # => <feSpotLight pointsAtX='val'/>

  def pointsAtX= value
    value = value.to_s
    @attributes['pointsAtX'] = value
    value.to_number
  end

  def pointsAtX
    @attributes['pointsAtX'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.pointsAtY=val
  #  print f
  #  # => <feSpotLight pointsAtY='val'/>

  def pointsAtY= value
    value = value.to_s
    @attributes['pointsAtY'] = value
    value.to_number
  end

  def pointsAtY
    @attributes['pointsAtY'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.pointsAtZ=val
  #  print f
  #  # => <feSpotLight pointsAtZ='val'/>

  def pointsAtZ= value
    value = value.to_s
    @attributes['pointsAtZ'] = value
    value.to_number
  end

  def pointsAtZ
    @attributes['pointsAtZ'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.specularExponent=val
  #  print f
  #  # => <feSpotLight specularExponent='val'/>

  def specularExponent= value
    value = value.to_s
    @attributes['specularExponent'] = value
    value.to_number
  end

  def specularExponent
    @attributes['specularExponent'].to_s.to_number
  end

  # example:
  #  f = FeSpotLight.new
  #  f.limitingConeAngle=val
  #  print f
  #  # => <feSpotLight limitingConeAngle='val'/>

  def limitingConeAngle= value
    value = value.to_s
    @attributes['limitingConeAngle'] = value
    value.to_number
  end

  def limitingConeAngle
    @attributes['limitingConeAngle'].to_s.to_number
  end

end


class FeBlend < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeBlend.new => <feBlend/>
  def initialize
    super('feBlend')
  end

  # required
  #
  # example:
  #  f = FeBlend.new
  #  f.in2=val
  #  print f
  #  # => <feBlend in2='val'/>

  def in2= value
    value = value.to_s
    @attributes['in2'] = value
    value.to_number
  end

  def in2
    @attributes['in2'].to_s.to_number
  end

  # example:
  #  f = FeBlend.new
  #  f.mode=val
  #  print f
  #  # => <feBlend mode='val'/>

  def mode= value
    value = value.to_s
    @attributes['mode'] = value
    value.to_number
  end

  def mode
    @attributes['mode'].to_s.to_number
  end

end


class FeColorMatrix < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeColorMatrix.new => <feColorMatrix/>
  def initialize
    super('feColorMatrix')
  end

  # example:
  #  f = FeColorMatrix.new
  #  f.svg_type=val
  #  print f
  #  # => <feColorMatrix type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

  # example:
  #  f = FeColorMatrix.new
  #  f.values=val
  #  print f
  #  # => <feColorMatrix values='val'/>

  def values= value
    value = value.to_s
    @attributes['values'] = value
    value.to_number
  end

  def values
    @attributes['values'].to_s.to_number
  end

end


class FeComponentTransfer < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeComponentTransfer.new => <feComponentTransfer/>
  def initialize
    super('feComponentTransfer')
  end

end


class FeFuncR < Element

  include Utils
  include StdAttrs
  include Component_transfer_function_attributes

  # FeFuncR.new => <feFuncR/>
  def initialize
    super('feFuncR')
  end

  # required
  #
  # example:
  #  f = FeFuncR.new
  #  f.svg_type=val
  #  print f
  #  # => <feFuncR type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class FeFuncG < Element

  include Utils
  include StdAttrs
  include Component_transfer_function_attributes

  # FeFuncG.new => <feFuncG/>
  def initialize
    super('feFuncG')
  end

  # required
  #
  # example:
  #  f = FeFuncG.new
  #  f.svg_type=val
  #  print f
  #  # => <feFuncG type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class FeFuncB < Element

  include Utils
  include StdAttrs
  include Component_transfer_function_attributes

  # FeFuncB.new => <feFuncB/>
  def initialize
    super('feFuncB')
  end

  # required
  #
  # example:
  #  f = FeFuncB.new
  #  f.svg_type=val
  #  print f
  #  # => <feFuncB type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class FeFuncA < Element

  include Utils
  include StdAttrs
  include Component_transfer_function_attributes

  # FeFuncA.new => <feFuncA/>
  def initialize
    super('feFuncA')
  end

  # required
  #
  # example:
  #  f = FeFuncA.new
  #  f.svg_type=val
  #  print f
  #  # => <feFuncA type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class FeComposite < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeComposite.new => <feComposite/>
  def initialize
    super('feComposite')
  end

  # required
  #
  # example:
  #  f = FeComposite.new
  #  f.in2=val
  #  print f
  #  # => <feComposite in2='val'/>

  def in2= value
    value = value.to_s
    @attributes['in2'] = value
    value.to_number
  end

  def in2
    @attributes['in2'].to_s.to_number
  end

  # example:
  #  f = FeComposite.new
  #  f.operator=val
  #  print f
  #  # => <feComposite operator='val'/>

  def operator= value
    value = value.to_s
    @attributes['operator'] = value
    value.to_number
  end

  def operator
    @attributes['operator'].to_s.to_number
  end

  # example:
  #  f = FeComposite.new
  #  f.k1=val
  #  print f
  #  # => <feComposite k1='val'/>

  def k1= value
    value = value.to_s
    @attributes['k1'] = value
    value.to_number
  end

  def k1
    @attributes['k1'].to_s.to_number
  end

  # example:
  #  f = FeComposite.new
  #  f.k2=val
  #  print f
  #  # => <feComposite k2='val'/>

  def k2= value
    value = value.to_s
    @attributes['k2'] = value
    value.to_number
  end

  def k2
    @attributes['k2'].to_s.to_number
  end

  # example:
  #  f = FeComposite.new
  #  f.k3=val
  #  print f
  #  # => <feComposite k3='val'/>

  def k3= value
    value = value.to_s
    @attributes['k3'] = value
    value.to_number
  end

  def k3
    @attributes['k3'].to_s.to_number
  end

  # example:
  #  f = FeComposite.new
  #  f.k4=val
  #  print f
  #  # => <feComposite k4='val'/>

  def k4= value
    value = value.to_s
    @attributes['k4'] = value
    value.to_number
  end

  def k4
    @attributes['k4'].to_s.to_number
  end

end


class FeConvolveMatrix < Element

  include Utils
  include Filter_primitive_attributes_with_in

  # FeConvolveMatrix.new => <feConvolveMatrix/>
  def initialize
    super('feConvolveMatrix')
  end

  # required
  #
  # example:
  #  f = FeConvolveMatrix.new
  #  f.order=val
  #  print f
  #  # => <feConvolveMatrix order='val'/>

  def order= value
    value = value.to_s
    @attributes['order'] = value
    value.to_number
  end

  def order
    @attributes['order'].to_s.to_number
  end

  # required
  #
  # example:
  #  f = FeConvolveMatrix.new
  #  f.kernelMatrix=val
  #  print f
  #  # => <feConvolveMatrix kernelMatrix='val'/>

  def kernelMatrix= value
    value = value.to_s
    @attributes['kernelMatrix'] = value
    value.to_number
  end

  def kernelMatrix
    @attributes['kernelMatrix'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.divisor=val
  #  print f
  #  # => <feConvolveMatrix divisor='val'/>

  def divisor= value
    value = value.to_s
    @attributes['divisor'] = value
    value.to_number
  end

  def divisor
    @attributes['divisor'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.bias=val
  #  print f
  #  # => <feConvolveMatrix bias='val'/>

  def bias= value
    value = value.to_s
    @attributes['bias'] = value
    value.to_number
  end

  def bias
    @attributes['bias'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.targetX=val
  #  print f
  #  # => <feConvolveMatrix targetX='val'/>

  def targetX= value
    value = value.to_s
    @attributes['targetX'] = value
    value.to_number
  end

  def targetX
    @attributes['targetX'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.targetY=val
  #  print f
  #  # => <feConvolveMatrix targetY='val'/>

  def targetY= value
    value = value.to_s
    @attributes['targetY'] = value
    value.to_number
  end

  def targetY
    @attributes['targetY'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.edgeMode=val
  #  print f
  #  # => <feConvolveMatrix edgeMode='val'/>

  def edgeMode= value
    value = value.to_s
    @attributes['edgeMode'] = value
    value.to_number
  end

  def edgeMode
    @attributes['edgeMode'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.kernelUnitLength=val
  #  print f
  #  # => <feConvolveMatrix kernelUnitLength='val'/>

  def kernelUnitLength= value
    value = value.to_s
    @attributes['kernelUnitLength'] = value
    value.to_number
  end

  def kernelUnitLength
    @attributes['kernelUnitLength'].to_s.to_number
  end

  # example:
  #  f = FeConvolveMatrix.new
  #  f.preserveAlpha=val
  #  print f
  #  # => <feConvolveMatrix preserveAlpha='val'/>

  def preserveAlpha= value
    value = value.to_s
    @attributes['preserveAlpha'] = value
    value.to_number
  end

  def preserveAlpha
    @attributes['preserveAlpha'].to_s.to_number
  end

end


class FeDiffuseLighting < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_LightingEffects
  include Filter_primitive_attributes_with_in

  # FeDiffuseLighting.new => <feDiffuseLighting/>
  def initialize
    super('feDiffuseLighting')
  end

  # example:
  #  f = FeDiffuseLighting.new
  #  f.svg_class=val
  #  print f
  #  # => <feDiffuseLighting class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = FeDiffuseLighting.new
  #  f.style=val
  #  print f
  #  # => <feDiffuseLighting style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = FeDiffuseLighting.new
  #  f.surfaceScale=val
  #  print f
  #  # => <feDiffuseLighting surfaceScale='val'/>

  def surfaceScale= value
    value = value.to_s
    @attributes['surfaceScale'] = value
    value.to_number
  end

  def surfaceScale
    @attributes['surfaceScale'].to_s.to_number
  end

  # example:
  #  f = FeDiffuseLighting.new
  #  f.diffuseConstant=val
  #  print f
  #  # => <feDiffuseLighting diffuseConstant='val'/>

  def diffuseConstant= value
    value = value.to_s
    @attributes['diffuseConstant'] = value
    value.to_number
  end

  def diffuseConstant
    @attributes['diffuseConstant'].to_s.to_number
  end

end


class FeDisplacementMap < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeDisplacementMap.new => <feDisplacementMap/>
  def initialize
    super('feDisplacementMap')
  end

  # required
  #
  # example:
  #  f = FeDisplacementMap.new
  #  f.in2=val
  #  print f
  #  # => <feDisplacementMap in2='val'/>

  def in2= value
    value = value.to_s
    @attributes['in2'] = value
    value.to_number
  end

  def in2
    @attributes['in2'].to_s.to_number
  end

  # example:
  #  f = FeDisplacementMap.new
  #  f.scale=val
  #  print f
  #  # => <feDisplacementMap scale='val'/>

  def scale= value
    value = value.to_s
    @attributes['scale'] = value
    value.to_number
  end

  def scale
    @attributes['scale'].to_s.to_number
  end

  # example:
  #  f = FeDisplacementMap.new
  #  f.xChannelSelector=val
  #  print f
  #  # => <feDisplacementMap xChannelSelector='val'/>

  def xChannelSelector= value
    value = value.to_s
    @attributes['xChannelSelector'] = value
    value.to_number
  end

  def xChannelSelector
    @attributes['xChannelSelector'].to_s.to_number
  end

  # example:
  #  f = FeDisplacementMap.new
  #  f.yChannelSelector=val
  #  print f
  #  # => <feDisplacementMap yChannelSelector='val'/>

  def yChannelSelector= value
    value = value.to_s
    @attributes['yChannelSelector'] = value
    value.to_number
  end

  def yChannelSelector
    @attributes['yChannelSelector'].to_s.to_number
  end

end


class FeFlood < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_feFlood
  include Filter_primitive_attributes_with_in

  # FeFlood.new => <feFlood/>
  def initialize
    super('feFlood')
  end

  # example:
  #  f = FeFlood.new
  #  f.svg_class=val
  #  print f
  #  # => <feFlood class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = FeFlood.new
  #  f.style=val
  #  print f
  #  # => <feFlood style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

end


class FeGaussianBlur < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeGaussianBlur.new => <feGaussianBlur/>
  def initialize
    super('feGaussianBlur')
  end

  # example:
  #  f = FeGaussianBlur.new
  #  f.stdDeviation=val
  #  print f
  #  # => <feGaussianBlur stdDeviation='val'/>

  def stdDeviation= value
    value = value.to_s
    @attributes['stdDeviation'] = value
    value.to_number
  end

  def stdDeviation
    @attributes['stdDeviation'].to_s.to_number
  end

end


class FeImage < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include Filter_primitive_attributes

  # FeImage.new => <feImage/>
  def initialize
    super('feImage')
  end

  # example:
  #  f = FeImage.new
  #  f.externalResourcesRequired=val
  #  print f
  #  # => <feImage externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  f = FeImage.new
  #  f.svg_class=val
  #  print f
  #  # => <feImage class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = FeImage.new
  #  f.style=val
  #  print f
  #  # => <feImage style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = FeImage.new
  #  f.transform=val
  #  print f
  #  # => <feImage transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class FeMerge < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes

  # FeMerge.new => <feMerge/>
  def initialize
    super('feMerge')
  end

end


class FeMergeNode < Element

  include Utils
  include StdAttrs

  # FeMergeNode.new => <feMergeNode/>
  def initialize
    super('feMergeNode')
  end

  # example:
  #  f = FeMergeNode.new
  #  f.svg_in=val
  #  print f
  #  # => <feMergeNode in='val'/>

  def svg_in= value
    value = value.to_s
    @attributes['in'] = value
    value.to_number
  end

  def svg_in
    @attributes['in'].to_s.to_number
  end

end


class FeMorphology < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeMorphology.new => <feMorphology/>
  def initialize
    super('feMorphology')
  end

  # example:
  #  f = FeMorphology.new
  #  f.operator=val
  #  print f
  #  # => <feMorphology operator='val'/>

  def operator= value
    value = value.to_s
    @attributes['operator'] = value
    value.to_number
  end

  def operator
    @attributes['operator'].to_s.to_number
  end

  # example:
  #  f = FeMorphology.new
  #  f.radius=val
  #  print f
  #  # => <feMorphology radius='val'/>

  def radius= value
    value = value.to_s
    @attributes['radius'] = value
    value.to_number
  end

  def radius
    @attributes['radius'].to_s.to_number
  end

end


class FeOffset < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeOffset.new => <feOffset/>
  def initialize
    super('feOffset')
  end

  # example:
  #  f = FeOffset.new
  #  f.dx=val
  #  print f
  #  # => <feOffset dx='val'/>

  def dx= value
    value = value.to_s
    @attributes['dx'] = value
    value.to_number
  end

  def dx
    @attributes['dx'].to_s.to_number
  end

  # example:
  #  f = FeOffset.new
  #  f.dy=val
  #  print f
  #  # => <feOffset dy='val'/>

  def dy= value
    value = value.to_s
    @attributes['dy'] = value
    value.to_number
  end

  def dy
    @attributes['dy'].to_s.to_number
  end

end


class FeSpecularLighting < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_LightingEffects
  include Filter_primitive_attributes_with_in

  # FeSpecularLighting.new => <feSpecularLighting/>
  def initialize
    super('feSpecularLighting')
  end

  # example:
  #  f = FeSpecularLighting.new
  #  f.svg_class=val
  #  print f
  #  # => <feSpecularLighting class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = FeSpecularLighting.new
  #  f.style=val
  #  print f
  #  # => <feSpecularLighting style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = FeSpecularLighting.new
  #  f.surfaceScale=val
  #  print f
  #  # => <feSpecularLighting surfaceScale='val'/>

  def surfaceScale= value
    value = value.to_s
    @attributes['surfaceScale'] = value
    value.to_number
  end

  def surfaceScale
    @attributes['surfaceScale'].to_s.to_number
  end

  # example:
  #  f = FeSpecularLighting.new
  #  f.specularConstant=val
  #  print f
  #  # => <feSpecularLighting specularConstant='val'/>

  def specularConstant= value
    value = value.to_s
    @attributes['specularConstant'] = value
    value.to_number
  end

  def specularConstant
    @attributes['specularConstant'].to_s.to_number
  end

  # example:
  #  f = FeSpecularLighting.new
  #  f.specularExponent=val
  #  print f
  #  # => <feSpecularLighting specularExponent='val'/>

  def specularExponent= value
    value = value.to_s
    @attributes['specularExponent'] = value
    value.to_number
  end

  def specularExponent
    @attributes['specularExponent'].to_s.to_number
  end

end


class FeTile < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes_with_in

  # FeTile.new => <feTile/>
  def initialize
    super('feTile')
  end

end


class FeTurbulence < Element

  include Utils
  include StdAttrs
  include Filter_primitive_attributes

  # FeTurbulence.new => <feTurbulence/>
  def initialize
    super('feTurbulence')
  end

  # example:
  #  f = FeTurbulence.new
  #  f.baseFrequency=val
  #  print f
  #  # => <feTurbulence baseFrequency='val'/>

  def baseFrequency= value
    value = value.to_s
    @attributes['baseFrequency'] = value
    value.to_number
  end

  def baseFrequency
    @attributes['baseFrequency'].to_s.to_number
  end

  # example:
  #  f = FeTurbulence.new
  #  f.numOctaves=val
  #  print f
  #  # => <feTurbulence numOctaves='val'/>

  def numOctaves= value
    value = value.to_s
    @attributes['numOctaves'] = value
    value.to_number
  end

  def numOctaves
    @attributes['numOctaves'].to_s.to_number
  end

  # example:
  #  f = FeTurbulence.new
  #  f.seed=val
  #  print f
  #  # => <feTurbulence seed='val'/>

  def seed= value
    value = value.to_s
    @attributes['seed'] = value
    value.to_number
  end

  def seed
    @attributes['seed'].to_s.to_number
  end

  # example:
  #  f = FeTurbulence.new
  #  f.stitchTiles=val
  #  print f
  #  # => <feTurbulence stitchTiles='val'/>

  def stitchTiles= value
    value = value.to_s
    @attributes['stitchTiles'] = value
    value.to_number
  end

  def stitchTiles
    @attributes['stitchTiles'].to_s.to_number
  end

  # example:
  #  f = FeTurbulence.new
  #  f.svg_type=val
  #  print f
  #  # => <feTurbulence type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class Cursor < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs
  include TestAttrs

  # Cursor.new => <cursor/>
  def initialize
    super('cursor')
  end

  # example:
  #  c = Cursor.new
  #  c.externalResourcesRequired=val
  #  print c
  #  # => <cursor externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  c = Cursor.new
  #  c.x=val
  #  print c
  #  # => <cursor x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  c = Cursor.new
  #  c.y=val
  #  print c
  #  # => <cursor y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class A < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # A.new => <a/>
  def initialize
    super('a')
  end

  # example:
  #  a = A.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <a externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  a = A.new
  #  a.svg_class=val
  #  print a
  #  # => <a class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  a = A.new
  #  a.style=val
  #  print a
  #  # => <a style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  a = A.new
  #  a.transform=val
  #  print a
  #  # => <a transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  a = A.new
  #  a.target=val
  #  print a
  #  # => <a target='val'/>

  def target= value
    value = value.to_s
    @attributes['target'] = value
    value.to_number
  end

  def target
    @attributes['target'].to_s.to_number
  end
#foofoo
  def xlink_type= value
    value = value.to_s
    @attributes['xlink:type'] = value
    value.to_number
  end

  def xlink_type
    @attributes['type'].to_s.to_number
  end
#foofoo
  def xlink_role= value
    value = value.to_s
    @attributes['xlink:role'] = value
    value.to_number
  end

  def xlink_role
    @attributes['role'].to_s.to_number
  end
#foofoo
  def xlink_arcrole= value
    value = value.to_s
    @attributes['xlink:arcrole'] = value
    value.to_number
  end

  def xlink_arcrole
    @attributes['arcrole'].to_s.to_number
  end
#foofoo
  def xlink_title= value
    value = value.to_s
    @attributes['xlink:title'] = value
    value.to_number
  end

  def xlink_title
    @attributes['title'].to_s.to_number
  end
#foofoo
  def xlink_show= value
    value = value.to_s
    @attributes['xlink:show'] = value
    value.to_number
  end

  def xlink_show
    @attributes['show'].to_s.to_number
  end
#foofoo
  def xlink_actuate= value
    value = value.to_s
    @attributes['xlink:actuate'] = value
    value.to_number
  end

  def xlink_actuate
    @attributes['actuate'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class View < Element

  include Utils
  include StdAttrs

  # View.new => <view/>
  def initialize
    super('view')
  end

  # example:
  #  v = View.new
  #  v.externalResourcesRequired=val
  #  print v
  #  # => <view externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  v = View.new
  #  v.viewBox=val
  #  print v
  #  # => <view viewBox='val'/>

  def viewBox= value
    value = value.to_s
    @attributes['viewBox'] = value
    value.to_number
  end

  def viewBox
    @attributes['viewBox'].to_s.to_number
  end

  # example:
  #  v = View.new
  #  v.preserveAspectRatio=val
  #  print v
  #  # => <view preserveAspectRatio='val'/>

  def preserveAspectRatio= value
    value = value.to_s
    @attributes['preserveAspectRatio'] = value
    value.to_number
  end

  def preserveAspectRatio
    @attributes['preserveAspectRatio'].to_s.to_number
  end

  # example:
  #  v = View.new
  #  v.zoomAndPan=val
  #  print v
  #  # => <view zoomAndPan='val'/>

  def zoomAndPan= value
    value = value.to_s
    @attributes['zoomAndPan'] = value
    value.to_number
  end

  def zoomAndPan
    @attributes['zoomAndPan'].to_s.to_number
  end

  # example:
  #  v = View.new
  #  v.viewTarget=val
  #  print v
  #  # => <view viewTarget='val'/>

  def viewTarget= value
    value = value.to_s
    @attributes['viewTarget'] = value
    value.to_number
  end

  def viewTarget
    @attributes['viewTarget'].to_s.to_number
  end

end


class Script < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # Script.new => <script/>
  def initialize
    super('script')
  end

  # example:
  #  s = Script.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <script externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # required
  #
  # example:
  #  s = Script.new
  #  s.svg_type=val
  #  print s
  #  # => <script type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Animate < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include AnimationEvents
  include AnimTargetAttrs
  include AnimTimingAttrs
  include AnimValueAttrs
  include AnimAdditionAttrs

  # Animate.new => <animate/>
  def initialize
    super('animate')
  end

  # example:
  #  a = Animate.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <animate externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

end


class Set < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include AnimationEvents
  include AnimTargetAttrs
  include AnimTimingAttrs

  # Set.new => <set/>
  def initialize
    super('set')
  end

  # example:
  #  s = Set.new
  #  s.externalResourcesRequired=val
  #  print s
  #  # => <set externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  s = Set.new
  #  s.to=val
  #  print s
  #  # => <set to='val'/>

  def to= value
    value = value.to_s
    @attributes['to'] = value
    value.to_number
  end

  def to
    @attributes['to'].to_s.to_number
  end

end


class AnimateMotion < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include AnimationEvents
  include AnimElementAttrs
  include AnimTimingAttrs
  include AnimValueAttrs
  include AnimAdditionAttrs

  # AnimateMotion.new => <animateMotion/>
  def initialize
    super('animateMotion')
  end

  # example:
  #  a = AnimateMotion.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <animateMotion externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  a = AnimateMotion.new
  #  a.path=val
  #  print a
  #  # => <animateMotion path='val'/>

  def path= value
    value = value.to_s
    @attributes['path'] = value
    value.to_number
  end

  def path
    @attributes['path'].to_s.to_number
  end

  # example:
  #  a = AnimateMotion.new
  #  a.keyPoints=val
  #  print a
  #  # => <animateMotion keyPoints='val'/>

  def keyPoints= value
    value = value.to_s
    @attributes['keyPoints'] = value
    value.to_number
  end

  def keyPoints
    @attributes['keyPoints'].to_s.to_number
  end

  # example:
  #  a = AnimateMotion.new
  #  a.rotate=val
  #  print a
  #  # => <animateMotion rotate='val'/>

  def rotate= value
    value = value.to_s
    @attributes['rotate'] = value
    value.to_number
  end

  def rotate
    @attributes['rotate'].to_s.to_number
  end

  # example:
  #  a = AnimateMotion.new
  #  a.origin=val
  #  print a
  #  # => <animateMotion origin='val'/>

  def origin= value
    value = value.to_s
    @attributes['origin'] = value
    value.to_number
  end

  def origin
    @attributes['origin'].to_s.to_number
  end

end


class Mpath < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # Mpath.new => <mpath/>
  def initialize
    super('mpath')
  end

  # example:
  #  m = Mpath.new
  #  m.externalResourcesRequired=val
  #  print m
  #  # => <mpath externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class AnimateColor < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include AnimationEvents
  include AnimTargetAttrs
  include AnimTimingAttrs
  include AnimValueAttrs
  include AnimAdditionAttrs

  # AnimateColor.new => <animateColor/>
  def initialize
    super('animateColor')
  end

  # example:
  #  a = AnimateColor.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <animateColor externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

end


class AnimateTransform < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include AnimationEvents
  include AnimTargetAttrs
  include AnimTimingAttrs
  include AnimValueAttrs
  include AnimAdditionAttrs

  # AnimateTransform.new => <animateTransform/>
  def initialize
    super('animateTransform')
  end

  # example:
  #  a = AnimateTransform.new
  #  a.externalResourcesRequired=val
  #  print a
  #  # => <animateTransform externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  a = AnimateTransform.new
  #  a.svg_type=val
  #  print a
  #  # => <animateTransform type='val'/>

  def svg_type= value
    value = value.to_s
    @attributes['type'] = value
    value.to_number
  end

  def svg_type
    @attributes['type'].to_s.to_number
  end

end


class Font < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_All

  # Font.new => <font/>
  def initialize
    super('font')
  end

  # example:
  #  f = Font.new
  #  f.externalResourcesRequired=val
  #  print f
  #  # => <font externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.svg_class=val
  #  print f
  #  # => <font class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.style=val
  #  print f
  #  # => <font style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.horiz_origin_x=val
  #  print f
  #  # => <font horiz-origin-x='val'/>

  def horiz_origin_x= value
    value = value.to_s
    @attributes['horiz-origin-x'] = value
    value.to_number
  end

  def horiz_origin_x
    @attributes['horiz-origin-x'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.horiz_origin_y=val
  #  print f
  #  # => <font horiz-origin-y='val'/>

  def horiz_origin_y= value
    value = value.to_s
    @attributes['horiz-origin-y'] = value
    value.to_number
  end

  def horiz_origin_y
    @attributes['horiz-origin-y'].to_s.to_number
  end

  # required
  #
  # example:
  #  f = Font.new
  #  f.horiz_adv_x=val
  #  print f
  #  # => <font horiz-adv-x='val'/>

  def horiz_adv_x= value
    value = value.to_s
    @attributes['horiz-adv-x'] = value
    value.to_number
  end

  def horiz_adv_x
    @attributes['horiz-adv-x'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.vert_origin_x=val
  #  print f
  #  # => <font vert-origin-x='val'/>

  def vert_origin_x= value
    value = value.to_s
    @attributes['vert-origin-x'] = value
    value.to_number
  end

  def vert_origin_x
    @attributes['vert-origin-x'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.vert_origin_y=val
  #  print f
  #  # => <font vert-origin-y='val'/>

  def vert_origin_y= value
    value = value.to_s
    @attributes['vert-origin-y'] = value
    value.to_number
  end

  def vert_origin_y
    @attributes['vert-origin-y'].to_s.to_number
  end

  # example:
  #  f = Font.new
  #  f.vert_adv_y=val
  #  print f
  #  # => <font vert-adv-y='val'/>

  def vert_adv_y= value
    value = value.to_s
    @attributes['vert-adv-y'] = value
    value.to_number
  end

  def vert_adv_y
    @attributes['vert-adv-y'].to_s.to_number
  end

end


class Glyph < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_All

  # Glyph.new => <glyph/>
  def initialize
    super('glyph')
  end

  # example:
  #  g = Glyph.new
  #  g.svg_class=val
  #  print g
  #  # => <glyph class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.style=val
  #  print g
  #  # => <glyph style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.unicode=val
  #  print g
  #  # => <glyph unicode='val'/>

  def unicode= value
    value = value.to_s
    @attributes['unicode'] = value
    value.to_number
  end

  def unicode
    @attributes['unicode'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.glyph_name=val
  #  print g
  #  # => <glyph glyph-name='val'/>

  def glyph_name= value
    value = value.to_s
    @attributes['glyph-name'] = value
    value.to_number
  end

  def glyph_name
    @attributes['glyph-name'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.d=val
  #  print g
  #  # => <glyph d='val'/>

  def d= value
    value = value.to_s
    @attributes['d'] = value
    value.to_number
  end

  def d
    @attributes['d'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.vert_text_orient=val
  #  print g
  #  # => <glyph vert-text-orient='val'/>

  def vert_text_orient= value
    value = value.to_s
    @attributes['vert-text-orient'] = value
    value.to_number
  end

  def vert_text_orient
    @attributes['vert-text-orient'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.arabic=val
  #  print g
  #  # => <glyph arabic='val'/>

  def arabic= value
    value = value.to_s
    @attributes['arabic'] = value
    value.to_number
  end

  def arabic
    @attributes['arabic'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.han=val
  #  print g
  #  # => <glyph han='val'/>

  def han= value
    value = value.to_s
    @attributes['han'] = value
    value.to_number
  end

  def han
    @attributes['han'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.horiz_adv_x=val
  #  print g
  #  # => <glyph horiz-adv-x='val'/>

  def horiz_adv_x= value
    value = value.to_s
    @attributes['horiz-adv-x'] = value
    value.to_number
  end

  def horiz_adv_x
    @attributes['horiz-adv-x'].to_s.to_number
  end

  # example:
  #  g = Glyph.new
  #  g.vert_adv_y=val
  #  print g
  #  # => <glyph vert-adv-y='val'/>

  def vert_adv_y= value
    value = value.to_s
    @attributes['vert-adv-y'] = value
    value.to_number
  end

  def vert_adv_y
    @attributes['vert-adv-y'].to_s.to_number
  end

end


class Missing_glyph < Element

  include Utils
  include StdAttrs
  include PresentationAttributes_All

  # Missing_glyph.new => <missing-glyph/>
  def initialize
    super('missing-glyph')
  end

  # example:
  #  m = Missing_glyph.new
  #  m.svg_class=val
  #  print m
  #  # => <missing-glyph class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  m = Missing_glyph.new
  #  m.style=val
  #  print m
  #  # => <missing-glyph style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  m = Missing_glyph.new
  #  m.d=val
  #  print m
  #  # => <missing-glyph d='val'/>

  def d= value
    value = value.to_s
    @attributes['d'] = value
    value.to_number
  end

  def d
    @attributes['d'].to_s.to_number
  end

  # example:
  #  m = Missing_glyph.new
  #  m.horiz_adv_x=val
  #  print m
  #  # => <missing-glyph horiz-adv-x='val'/>

  def horiz_adv_x= value
    value = value.to_s
    @attributes['horiz-adv-x'] = value
    value.to_number
  end

  def horiz_adv_x
    @attributes['horiz-adv-x'].to_s.to_number
  end

  # example:
  #  m = Missing_glyph.new
  #  m.vert_adv_y=val
  #  print m
  #  # => <missing-glyph vert-adv-y='val'/>

  def vert_adv_y= value
    value = value.to_s
    @attributes['vert-adv-y'] = value
    value.to_number
  end

  def vert_adv_y
    @attributes['vert-adv-y'].to_s.to_number
  end

end


class Hkern < Element

  include Utils
  include StdAttrs

  # Hkern.new => <hkern/>
  def initialize
    super('hkern')
  end

  # example:
  #  h = Hkern.new
  #  h.u1=val
  #  print h
  #  # => <hkern u1='val'/>

  def u1= value
    value = value.to_s
    @attributes['u1'] = value
    value.to_number
  end

  def u1
    @attributes['u1'].to_s.to_number
  end

  # example:
  #  h = Hkern.new
  #  h.g1=val
  #  print h
  #  # => <hkern g1='val'/>

  def g1= value
    value = value.to_s
    @attributes['g1'] = value
    value.to_number
  end

  def g1
    @attributes['g1'].to_s.to_number
  end

  # example:
  #  h = Hkern.new
  #  h.u2=val
  #  print h
  #  # => <hkern u2='val'/>

  def u2= value
    value = value.to_s
    @attributes['u2'] = value
    value.to_number
  end

  def u2
    @attributes['u2'].to_s.to_number
  end

  # example:
  #  h = Hkern.new
  #  h.g2=val
  #  print h
  #  # => <hkern g2='val'/>

  def g2= value
    value = value.to_s
    @attributes['g2'] = value
    value.to_number
  end

  def g2
    @attributes['g2'].to_s.to_number
  end

  # required
  #
  # example:
  #  h = Hkern.new
  #  h.k=val
  #  print h
  #  # => <hkern k='val'/>

  def k= value
    value = value.to_s
    @attributes['k'] = value
    value.to_number
  end

  def k
    @attributes['k'].to_s.to_number
  end

end


class Vkern < Element

  include Utils
  include StdAttrs

  # Vkern.new => <vkern/>
  def initialize
    super('vkern')
  end

  # example:
  #  v = Vkern.new
  #  v.u1=val
  #  print v
  #  # => <vkern u1='val'/>

  def u1= value
    value = value.to_s
    @attributes['u1'] = value
    value.to_number
  end

  def u1
    @attributes['u1'].to_s.to_number
  end

  # example:
  #  v = Vkern.new
  #  v.g1=val
  #  print v
  #  # => <vkern g1='val'/>

  def g1= value
    value = value.to_s
    @attributes['g1'] = value
    value.to_number
  end

  def g1
    @attributes['g1'].to_s.to_number
  end

  # example:
  #  v = Vkern.new
  #  v.u2=val
  #  print v
  #  # => <vkern u2='val'/>

  def u2= value
    value = value.to_s
    @attributes['u2'] = value
    value.to_number
  end

  def u2
    @attributes['u2'].to_s.to_number
  end

  # example:
  #  v = Vkern.new
  #  v.g2=val
  #  print v
  #  # => <vkern g2='val'/>

  def g2= value
    value = value.to_s
    @attributes['g2'] = value
    value.to_number
  end

  def g2
    @attributes['g2'].to_s.to_number
  end

  # required
  #
  # example:
  #  v = Vkern.new
  #  v.k=val
  #  print v
  #  # => <vkern k='val'/>

  def k= value
    value = value.to_s
    @attributes['k'] = value
    value.to_number
  end

  def k
    @attributes['k'].to_s.to_number
  end

end


class Font_face < Element

  include Utils
  include StdAttrs

  # Font_face.new => <font-face/>
  def initialize
    super('font-face')
  end

  # example:
  #  f = Font_face.new
  #  f.font_family=val
  #  print f
  #  # => <font-face font-family='val'/>

  def font_family= value
    value = value.to_s
    @attributes['font-family'] = value
    value.to_number
  end

  def font_family
    @attributes['font-family'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.font_style=val
  #  print f
  #  # => <font-face font-style='val'/>

  def font_style= value
    value = value.to_s
    @attributes['font-style'] = value
    value.to_number
  end

  def font_style
    @attributes['font-style'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.font_variant=val
  #  print f
  #  # => <font-face font-variant='val'/>

  def font_variant= value
    value = value.to_s
    @attributes['font-variant'] = value
    value.to_number
  end

  def font_variant
    @attributes['font-variant'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.font_weight=val
  #  print f
  #  # => <font-face font-weight='val'/>

  def font_weight= value
    value = value.to_s
    @attributes['font-weight'] = value
    value.to_number
  end

  def font_weight
    @attributes['font-weight'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.font_stretch=val
  #  print f
  #  # => <font-face font-stretch='val'/>

  def font_stretch= value
    value = value.to_s
    @attributes['font-stretch'] = value
    value.to_number
  end

  def font_stretch
    @attributes['font-stretch'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.font_size=val
  #  print f
  #  # => <font-face font-size='val'/>

  def font_size= value
    value = value.to_s
    @attributes['font-size'] = value
    value.to_number
  end

  def font_size
    @attributes['font-size'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.unicode_range=val
  #  print f
  #  # => <font-face unicode-range='val'/>

  def unicode_range= value
    value = value.to_s
    @attributes['unicode-range'] = value
    value.to_number
  end

  def unicode_range
    @attributes['unicode-range'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.units_per_em=val
  #  print f
  #  # => <font-face units-per-em='val'/>

  def units_per_em= value
    value = value.to_s
    @attributes['units-per-em'] = value
    value.to_number
  end

  def units_per_em
    @attributes['units-per-em'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.panose_1=val
  #  print f
  #  # => <font-face panose-1='val'/>

  def panose_1= value
    value = value.to_s
    @attributes['panose-1'] = value
    value.to_number
  end

  def panose_1
    @attributes['panose-1'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.stemv=val
  #  print f
  #  # => <font-face stemv='val'/>

  def stemv= value
    value = value.to_s
    @attributes['stemv'] = value
    value.to_number
  end

  def stemv
    @attributes['stemv'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.stemh=val
  #  print f
  #  # => <font-face stemh='val'/>

  def stemh= value
    value = value.to_s
    @attributes['stemh'] = value
    value.to_number
  end

  def stemh
    @attributes['stemh'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.slope=val
  #  print f
  #  # => <font-face slope='val'/>

  def slope= value
    value = value.to_s
    @attributes['slope'] = value
    value.to_number
  end

  def slope
    @attributes['slope'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.cap_height=val
  #  print f
  #  # => <font-face cap-height='val'/>

  def cap_height= value
    value = value.to_s
    @attributes['cap-height'] = value
    value.to_number
  end

  def cap_height
    @attributes['cap-height'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.x_height=val
  #  print f
  #  # => <font-face x-height='val'/>

  def x_height= value
    value = value.to_s
    @attributes['x-height'] = value
    value.to_number
  end

  def x_height
    @attributes['x-height'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.accent_height=val
  #  print f
  #  # => <font-face accent-height='val'/>

  def accent_height= value
    value = value.to_s
    @attributes['accent-height'] = value
    value.to_number
  end

  def accent_height
    @attributes['accent-height'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.ascent=val
  #  print f
  #  # => <font-face ascent='val'/>

  def ascent= value
    value = value.to_s
    @attributes['ascent'] = value
    value.to_number
  end

  def ascent
    @attributes['ascent'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.descent=val
  #  print f
  #  # => <font-face descent='val'/>

  def descent= value
    value = value.to_s
    @attributes['descent'] = value
    value.to_number
  end

  def descent
    @attributes['descent'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.widths=val
  #  print f
  #  # => <font-face widths='val'/>

  def widths= value
    value = value.to_s
    @attributes['widths'] = value
    value.to_number
  end

  def widths
    @attributes['widths'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.bbox=val
  #  print f
  #  # => <font-face bbox='val'/>

  def bbox= value
    value = value.to_s
    @attributes['bbox'] = value
    value.to_number
  end

  def bbox
    @attributes['bbox'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.ideographic=val
  #  print f
  #  # => <font-face ideographic='val'/>

  def ideographic= value
    value = value.to_s
    @attributes['ideographic'] = value
    value.to_number
  end

  def ideographic
    @attributes['ideographic'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.baseline=val
  #  print f
  #  # => <font-face baseline='val'/>

  def baseline= value
    value = value.to_s
    @attributes['baseline'] = value
    value.to_number
  end

  def baseline
    @attributes['baseline'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.centerline=val
  #  print f
  #  # => <font-face centerline='val'/>

  def centerline= value
    value = value.to_s
    @attributes['centerline'] = value
    value.to_number
  end

  def centerline
    @attributes['centerline'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.mathline=val
  #  print f
  #  # => <font-face mathline='val'/>

  def mathline= value
    value = value.to_s
    @attributes['mathline'] = value
    value.to_number
  end

  def mathline
    @attributes['mathline'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.hanging=val
  #  print f
  #  # => <font-face hanging='val'/>

  def hanging= value
    value = value.to_s
    @attributes['hanging'] = value
    value.to_number
  end

  def hanging
    @attributes['hanging'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.topline=val
  #  print f
  #  # => <font-face topline='val'/>

  def topline= value
    value = value.to_s
    @attributes['topline'] = value
    value.to_number
  end

  def topline
    @attributes['topline'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.underline_position=val
  #  print f
  #  # => <font-face underline-position='val'/>

  def underline_position= value
    value = value.to_s
    @attributes['underline-position'] = value
    value.to_number
  end

  def underline_position
    @attributes['underline-position'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.underline_thickness=val
  #  print f
  #  # => <font-face underline-thickness='val'/>

  def underline_thickness= value
    value = value.to_s
    @attributes['underline-thickness'] = value
    value.to_number
  end

  def underline_thickness
    @attributes['underline-thickness'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.strikethrough_position=val
  #  print f
  #  # => <font-face strikethrough-position='val'/>

  def strikethrough_position= value
    value = value.to_s
    @attributes['strikethrough-position'] = value
    value.to_number
  end

  def strikethrough_position
    @attributes['strikethrough-position'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.strikethrough_thickness=val
  #  print f
  #  # => <font-face strikethrough-thickness='val'/>

  def strikethrough_thickness= value
    value = value.to_s
    @attributes['strikethrough-thickness'] = value
    value.to_number
  end

  def strikethrough_thickness
    @attributes['strikethrough-thickness'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.overline_position=val
  #  print f
  #  # => <font-face overline-position='val'/>

  def overline_position= value
    value = value.to_s
    @attributes['overline-position'] = value
    value.to_number
  end

  def overline_position
    @attributes['overline-position'].to_s.to_number
  end

  # example:
  #  f = Font_face.new
  #  f.overline_thickness=val
  #  print f
  #  # => <font-face overline-thickness='val'/>

  def overline_thickness= value
    value = value.to_s
    @attributes['overline-thickness'] = value
    value.to_number
  end

  def overline_thickness
    @attributes['overline-thickness'].to_s.to_number
  end

end


class Font_face_src < Element

  include Utils
  include StdAttrs

  # Font_face_src.new => <font-face-src/>
  def initialize
    super('font-face-src')
  end

end


class Font_face_uri < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # Font_face_uri.new => <font-face-uri/>
  def initialize
    super('font-face-uri')
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Font_face_format < Element

  include Utils
  include StdAttrs

  # Font_face_format.new => <font-face-format/>
  def initialize
    super('font-face-format')
  end

  # example:
  #  f = Font_face_format.new
  #  f.string=val
  #  print f
  #  # => <font-face-format string='val'/>

  def string= value
    value = value.to_s
    @attributes['string'] = value
    value.to_number
  end

  def string
    @attributes['string'].to_s.to_number
  end

end


class Font_face_name < Element

  include Utils
  include StdAttrs

  # Font_face_name.new => <font-face-name/>
  def initialize
    super('font-face-name')
  end

  # example:
  #  f = Font_face_name.new
  #  f.svg_name=val
  #  print f
  #  # => <font-face-name name='val'/>

  def svg_name= value
    value = value.to_s
    @attributes['name'] = value
    value.to_number
  end

  def svg_name
    @attributes['name'].to_s.to_number
  end

end


class Definition_src < Element

  include Utils
  include StdAttrs
  include XlinkRefAttrs

  # Definition_src.new => <definition-src/>
  def initialize
    super('definition-src')
  end
#foofoo
  def xlink_href= value
    value = value.to_s
    @attributes['xlink:href'] = value
    value.to_number
  end

  def xlink_href
    @attributes['href'].to_s.to_number
  end

end


class Metadata < Element

  include Utils
  include StdAttrs

  # Metadata.new => <metadata/>
  def initialize
    super('metadata')
  end

end


class ForeignObject < Element

  include Utils
  include StdAttrs
  include TestAttrs
  include LangSpaceAttrs
  include PresentationAttributes_All
  include GraphicsElementEvents

  # ForeignObject.new => <foreignObject/>
  def initialize
    super('foreignObject')
  end

  # example:
  #  f = ForeignObject.new
  #  f.externalResourcesRequired=val
  #  print f
  #  # => <foreignObject externalResourcesRequired='val'/>

  def externalResourcesRequired= value
    value = value.to_s
    @attributes['externalResourcesRequired'] = value
    value.to_number
  end

  def externalResourcesRequired
    @attributes['externalResourcesRequired'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.svg_class=val
  #  print f
  #  # => <foreignObject class='val'/>

  def svg_class= value
    value = value.to_s
    @attributes['class'] = value
    value.to_number
  end

  def svg_class
    @attributes['class'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.style=val
  #  print f
  #  # => <foreignObject style='val'/>

  def style= value
    value = value.to_s
    @attributes['style'] = value
    value.to_number
  end

  def style
    @attributes['style'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.transform=val
  #  print f
  #  # => <foreignObject transform='val'/>

  def transform= value
    value = value.to_s
    @attributes['transform'] = value
    value.to_number
  end

  def transform
    @attributes['transform'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.x=val
  #  print f
  #  # => <foreignObject x='val'/>

  def x= value
    value = value.to_s
    @attributes['x'] = value
    value.to_number
  end

  def x
    @attributes['x'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.y=val
  #  print f
  #  # => <foreignObject y='val'/>

  def y= value
    value = value.to_s
    @attributes['y'] = value
    value.to_number
  end

  def y
    @attributes['y'].to_s.to_number
  end

  # required
  #
  # example:
  #  f = ForeignObject.new
  #  f.width=val
  #  print f
  #  # => <foreignObject width='val'/>

  def width= value
    value = value.to_s
    @attributes['width'] = value
    value.to_number
  end

  def width
    @attributes['width'].to_s.to_number
  end

  # required
  #
  # example:
  #  f = ForeignObject.new
  #  f.height=val
  #  print f
  #  # => <foreignObject height='val'/>

  def height= value
    value = value.to_s
    @attributes['height'] = value
    value.to_number
  end

  def height
    @attributes['height'].to_s.to_number
  end

  # example:
  #  f = ForeignObject.new
  #  f.content=val
  #  print f
  #  # => <foreignObject content='val'/>

  def content= value
    value = value.to_s
    @attributes['content'] = value
    value.to_number
  end

  def content
    @attributes['content'].to_s.to_number
  end

end

class Svg_doc < Document

  # Svg_doc.new => a new svg document
  def initialize
    super
    root_el = Svg.new
    root_el.attributes['xmlns']='http://www.w3.org/2000/svg'
    @children << root_el
  end

end
